{
  "version": 3,
  "sources": ["../../@hangtime/grip-connect/dist/models/base.model.js", "../../@hangtime/grip-connect/dist/models/device.model.js", "../../@hangtime/grip-connect/dist/models/device/climbro.model.js", "../../@hangtime/grip-connect/dist/models/device/entralpi.model.js", "../../@hangtime/grip-connect/dist/models/device/forceboard.model.js", "../../@hangtime/grip-connect/dist/models/device/kilterboard.model.js", "../../@hangtime/grip-connect/dist/models/device/motherboard.model.js", "../../@hangtime/grip-connect/dist/models/device/mysmartboard.model.js", "../../@hangtime/grip-connect/dist/models/device/progressor.model.js", "../../@hangtime/grip-connect/dist/models/device/wh-c06.model.js"],
  "sourcesContent": ["export class BaseModel {\n    id;\n    createdAt;\n    updatedAt;\n    constructor(base) {\n        this.id = base.id ?? globalThis.crypto?.randomUUID();\n        this.createdAt = base.createdAt;\n        this.updatedAt = base.updatedAt;\n    }\n}\n", "import { BaseModel } from \"./../models/base.model.js\";\nexport class Device extends BaseModel {\n    /**\n     * Filters to identify the device during Bluetooth scanning.\n     * Used to match devices that meet specific criteria such as name, service UUIDs, etc.\n     * @type {BluetoothLEScanFilter[]}\n     * @public\n     * @readonly\n     */\n    filters;\n    /**\n     * Array of services provided by the device.\n     * Services represent functionalities that the device supports, such as weight measurement, battery information, or custom services.\n     * @type {Service[]}\n     * @public\n     * @readonly\n     */\n    services;\n    /**\n     * Reference to the `BluetoothDevice` object representing this device.\n     * This is the actual device object obtained from the Web Bluetooth API after a successful connection.\n     * @type {BluetoothDevice | undefined}\n     * @public\n     */\n    bluetooth;\n    /**\n     * Object representing the set of commands available for this device.\n     * These commands allow communication with the device to perform various operations such as starting measurements, retrieving data, or calibrating the device.\n     * @type {Commands}\n     * @public\n     * @readonly\n     */\n    commands;\n    /**\n     * The BluetoothRemoteGATTServer interface of the Web Bluetooth API represents a GATT Server on a remote device.\n     * @type {BluetoothRemoteGATTServer | undefined}\n     * @private\n     */\n    server;\n    /**\n     * The last message written to the device.\n     * @type {string | Uint8Array | null}\n     * @protected\n     */\n    writeLast = null;\n    /**\n     * Indicates whether the device is currently active.\n     * @type {boolean}\n     */\n    isActive = false;\n    /**\n     * Configuration for threshold and duration.\n     */\n    activeConfig = {\n        threshold: 2.5,\n        duration: 1000,\n    };\n    /**\n     * Maximum mass recorded from the device, initialized to \"0\".\n     * @type {string}\n     * @protected\n     */\n    massMax;\n    /**\n     * Average mass calculated from the device data, initialized to \"0\".\n     * @type {string}\n     * @protected\n     */\n    massAverage;\n    /**\n     * Total sum of all mass data points recorded from the device.\n     * Used to calculate the average mass.\n     * @type {number}\n     * @protected\n     */\n    massTotalSum;\n    /**\n     * Number of data points received from the device.\n     * Used to calculate the average mass.\n     * @type {number}\n     * @protected\n     */\n    dataPointCount;\n    /**\n     * Array of DownloadPacket entries.\n     * This array holds packets that contain data downloaded from the device.\n     * @type {DownloadPacket[]}\n     * @protected\n     */\n    downloadPackets = []; // Initialize an empty array of DownloadPacket entries\n    /**\n     * Represents the current tare value for calibration.\n     * @type {number}\n     */\n    tareCurrent = 0;\n    /**\n     * Indicates whether the tare calibration process is active.\n     * @type {boolean}\n     */\n    tareActive = false;\n    /**\n     * Timestamp when the tare calibration process started.\n     * @type {number | null}\n     */\n    tareStartTime = null;\n    /**\n     * Array holding the samples collected during tare calibration.\n     * @type {number[]}\n     */\n    tareSamples = [];\n    /**\n     * Duration time for the tare calibration process.\n     * @type {number}\n     */\n    tareDuration = 5000;\n    /**\n     * Optional callback for handling write operations.\n     * @callback NotifyCallback\n     * @param {massObject} data - The data passed to the callback.\n     * @type {NotifyCallback | undefined}\n     * @protected\n     */\n    notifyCallback = (data) => console.log(data);\n    /**\n     * Optional callback for handling write operations.\n     * @callback WriteCallback\n     * @param {string} data - The data passed to the callback.\n     * @type {WriteCallback | undefined}\n     * @protected\n     */\n    writeCallback = (data) => console.log(data);\n    /**\n     * Optional callback for handling write operations.\n     * @callback ActiveCallback\n     * @param {string} data - The data passed to the callback.\n     * @type {ActiveCallback | undefined}\n     * @protected\n     */\n    activeCallback = (data) => console.log(data);\n    /**\n     * Event listener for handling the 'gattserverdisconnected' event.\n     * This listener delegates the event to the `onDisconnected` method.\n     *\n     * @private\n     * @type {(event: Event) => void}\n     */\n    onDisconnectedListener = (event) => this.onDisconnected(event);\n    /**\n     * A map that stores notification event listeners keyed by characteristic UUIDs.\n     * This allows for proper addition and removal of event listeners associated with each characteristic.\n     *\n     * @private\n     * @type {Map<string, EventListener>}\n     */\n    notificationListeners = new Map();\n    constructor(device) {\n        super(device);\n        this.filters = device.filters || [];\n        this.services = device.services || [];\n        this.commands = device.commands || {};\n        this.bluetooth = device.bluetooth;\n        this.massMax = \"0\";\n        this.massAverage = \"0\";\n        this.massTotalSum = 0;\n        this.dataPointCount = 0;\n        this.createdAt = new Date();\n        this.updatedAt = new Date();\n    }\n    /**\n     * Sets the callback function to be called when the activity status changes,\n     * and optionally sets the configuration for threshold and duration.\n     *\n     * This function allows you to specify a callback that will be invoked whenever\n     * the activity status changes, indicating whether the device is currently active.\n     * It also allows optionally configuring the threshold and duration used to determine activity.\n     *\n     * @param {ActiveCallback} callback - The callback function to be set. This function\n     *                                      receives a boolean value indicating the new activity status.\n     * @param {object} [options] - Optional configuration object containing the threshold and duration.\n     * @param {number} [options.threshold=2.5] - The threshold value for determining activity.\n     * @param {number} [options.duration=1000] - The duration (in milliseconds) to monitor the input for activity.\n     * @returns {void}\n     * @public\n     *\n     * @example\n     * device.active((isActive) => {\n     *   console.log(`Device is ${isActive ? 'active' : 'inactive'}`);\n     * }, { threshold: 3.0, duration: 1500 });\n     */\n    active = (callback, options) => {\n        this.activeCallback = callback;\n        // Update the config values only if provided, otherwise use defaults\n        this.activeConfig = {\n            threshold: options?.threshold ?? this.activeConfig.threshold, // Use new threshold if provided, else use default\n            duration: options?.duration ?? this.activeConfig.duration, // Use new duration if provided, else use default\n        };\n    };\n    /**\n     * Checks if a dynamic value is active based on a threshold and duration.\n     *\n     * This function assesses whether a given dynamic value surpasses a specified threshold\n     * and remains active for a specified duration. If the activity status changes from\n     * the previous state, the callback function is called with the updated activity status.\n     *\n     * @param {number} input - The dynamic value to check for activity status.\n     * @returns {Promise<void>} A promise that resolves once the activity check is complete.\n     *\n     * @example\n     * await device.activityCheck(5.0);\n     */\n    activityCheck = (input) => {\n        return new Promise((resolve) => {\n            const startValue = input;\n            const { threshold, duration } = this.activeConfig;\n            setTimeout(() => {\n                // After waiting for `duration`, check if still active (for a real scenario, you might store a last known input)\n                const activeNow = startValue > threshold;\n                if (this.isActive !== activeNow) {\n                    this.isActive = activeNow;\n                    if (this.activeCallback) {\n                        this.activeCallback(activeNow);\n                    }\n                }\n                resolve();\n            }, duration);\n        });\n    };\n    /**\n     * Connects to a Bluetooth device.\n     * @param {Function} [onSuccess] - Optional callback function to execute on successful connection. Default logs success.\n     * @param {Function} [onError] - Optional callback function to execute on error. Default logs the error.\n     * @public\n     *\n     * @example\n     * device.connect(\n     *   () => console.log(\"Connected successfully\"),\n     *   (error) => console.error(\"Connection failed:\", error)\n     * );\n     */\n    connect = async (onSuccess = () => console.log(\"Connected successfully\"), onError = (error) => console.error(error)) => {\n        try {\n            // Request device and set up connection\n            const deviceServices = this.getAllServiceUUIDs();\n            const bluetooth = await this.getBluetooth();\n            this.bluetooth = await bluetooth.requestDevice({\n                filters: this.filters,\n                optionalServices: deviceServices,\n            });\n            if (!this.bluetooth.gatt) {\n                throw new Error(\"GATT is not available on this device\");\n            }\n            this.bluetooth.addEventListener(\"gattserverdisconnected\", this.onDisconnectedListener);\n            this.server = await this.bluetooth.gatt.connect();\n            if (this.server.connected) {\n                await this.onConnected(onSuccess);\n            }\n        }\n        catch (error) {\n            onError(error);\n        }\n    };\n    /**\n     * Disconnects the device if it is currently connected.\n     * - Removes all notification listeners from the device's characteristics.\n     * - Removes the 'gattserverdisconnected' event listener.\n     * - Attempts to gracefully disconnect the device's GATT server.\n     * - Resets relevant properties to their initial states.\n     * @returns {void}\n     * @public\n     *\n     * @example\n     * device.disconnect();\n     */\n    disconnect = () => {\n        if (this.isConnected()) {\n            this.updateTimestamp();\n            // Remove all notification listeners\n            this.services.forEach((service) => {\n                service.characteristics.forEach((char) => {\n                    // TODO: remove device-specific logic\n                    if (char.characteristic && char.id === \"rx\") {\n                        char.characteristic.stopNotifications();\n                        const listener = this.notificationListeners.get(char.uuid);\n                        if (listener) {\n                            char.characteristic.removeEventListener(\"characteristicvaluechanged\", listener);\n                            this.notificationListeners.delete(char.uuid);\n                        }\n                    }\n                });\n            });\n            // Remove disconnect listener\n            this.bluetooth?.removeEventListener(\"gattserverdisconnected\", this.onDisconnectedListener);\n            // Safely attempt to disconnect the device's GATT server, if available\n            this.bluetooth?.gatt?.disconnect();\n            // Reset properties\n            this.server = undefined;\n            this.writeLast = null;\n            this.isActive = false;\n        }\n    };\n    /**\n     * Converts the `downloadPackets` array into a CSV formatted string.\n     * @returns {string} A CSV string representation of the `downloadPackets` data, with each packet on a new line.\n     * @private\n     *\n     * @example\n     * const csvData = device.downloadToCSV();\n     * console.log(csvData);\n     */\n    downloadToCSV = () => {\n        const packets = [...this.downloadPackets];\n        if (packets.length === 0) {\n            return \"\";\n        }\n        return packets\n            .map((packet) => [\n            packet.received.toString(),\n            packet.sampleNum.toString(),\n            packet.battRaw.toString(),\n            ...packet.samples.map(String),\n            ...packet.masses.map(String),\n        ]\n            .map((v) => v.replace(/\"/g, '\"\"'))\n            .map((v) => `\"${v}\"`)\n            .join(\",\"))\n            .join(\"\\r\\n\");\n    };\n    /**\n     * Converts an array of DownloadPacket objects to a JSON string.\n     * @returns {string} JSON string representation of the data.\n     * @private\n     *\n     * @example\n     * const jsonData = device.downloadToJSON();\n     * console.log(jsonData);\n     */\n    downloadToJSON = () => {\n        // Pretty print JSON with 2-space indentation\n        return JSON.stringify(this.downloadPackets, null, 2);\n    };\n    /**\n     * Converts an array of DownloadPacket objects to an XML string.\n     * @returns {string}  XML string representation of the data.\n     * @private\n     *\n     * @example\n     * const xmlData = device.downloadToXML();\n     * console.log(xmlData);\n     */\n    downloadToXML = () => {\n        const xmlPackets = this.downloadPackets\n            .map((packet) => {\n            const samples = packet.samples.map((sample) => `<sample>${sample}</sample>`).join(\"\");\n            const masses = packet.masses.map((mass) => `<mass>${mass}</mass>`).join(\"\");\n            return `\n          <packet>\n            <received>${packet.received}</received>\n            <sampleNum>${packet.sampleNum}</sampleNum>\n            <battRaw>${packet.battRaw}</battRaw>\n            <samples>${samples}</samples>\n            <masses>${masses}</masses>\n          </packet>\n        `;\n        })\n            .join(\"\");\n        return `<DownloadPackets>${xmlPackets}</DownloadPackets>`;\n    };\n    /**\n     * Exports the data in the specified format (CSV, JSON, XML) with a filename format:\n     * 'data-export-YYYY-MM-DD-HH-MM-SS.{format}'.\n     *\n     * @param {('csv' | 'json' | 'xml')} [format='csv'] - The format in which to download the data.\n     * Defaults to 'csv'. Accepted values are 'csv', 'json', and 'xml'.\n     *\n     * @returns {Promise<void>} Resolves when the data has been downloaded/written\n     * @public\n     *\n     * @example\n     * await device.download('json');\n     */\n    download = async (format = \"csv\") => {\n        let content = \"\";\n        if (format === \"csv\") {\n            content = this.downloadToCSV();\n        }\n        else if (format === \"json\") {\n            content = this.downloadToJSON();\n        }\n        else if (format === \"xml\") {\n            content = this.downloadToXML();\n        }\n        const now = new Date();\n        // YYYY-MM-DD\n        const date = now.toISOString().split(\"T\")[0];\n        // HH-MM-SS\n        const time = now.toTimeString().split(\" \")[0].replace(/:/g, \"-\");\n        const fileName = `data-export-${date}-${time}.${format}`;\n        if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n            const mimeTypes = {\n                csv: \"text/csv\",\n                json: \"application/json\",\n                xml: \"application/xml\",\n            };\n            // Create a Blob object containing the data\n            const blob = new Blob([content], { type: mimeTypes[format] });\n            // Create a URL for the Blob\n            const url = globalThis.URL.createObjectURL(blob);\n            // Create a link element\n            const link = document.createElement(\"a\");\n            // Set link attributes\n            link.href = url;\n            link.setAttribute(\"download\", fileName);\n            // Append link to document body\n            document.body.appendChild(link);\n            // Programmatically click the link to trigger the download\n            link.click();\n            // Clean up: remove the link and revoke the URL\n            document.body.removeChild(link);\n            globalThis.URL.revokeObjectURL(url);\n        }\n        else {\n            const { writeFile } = await import(\"node:fs/promises\");\n            await writeFile(fileName, content);\n            console.log(`File saved as ${fileName}`);\n        }\n    };\n    /**\n     * Returns UUIDs of all services associated with the device.\n     * @returns {string[]} Array of service UUIDs.\n     * @protected\n     *\n     * @example\n     * const serviceUUIDs = device.getAllServiceUUIDs();\n     * console.log(serviceUUIDs);\n     */\n    getAllServiceUUIDs = () => {\n        return this.services.filter((service) => service?.uuid).map((service) => service.uuid);\n    };\n    /**\n     * Attempt to use ES module import rather than require.\n     * This approach uses an async dynamic import for `webbluetooth`,\n     * so we can fallback if `navigator.bluetooth` is unavailable.\n     */\n    async getBluetooth() {\n        // If we're in a browser with real Web Bluetooth available:\n        if (typeof navigator !== \"undefined\" && \"bluetooth\" in navigator) {\n            return navigator.bluetooth;\n        }\n        // Otherwise, we're likely in Node or an environment without `navigator.bluetooth`.\n        // Use a dynamic import for the ESM version:\n        const { bluetooth } = await import(\"webbluetooth\");\n        return bluetooth;\n    }\n    /**\n     * Retrieves the characteristic from the device's service.\n     * @param {string} serviceId - The UUID of the service.\n     * @param {string} characteristicId - The UUID of the characteristic.\n     * @returns {BluetoothRemoteGATTCharacteristic | undefined} The characteristic, if found.\n     * @protected\n     *\n     * @example\n     * const characteristic = device.getCharacteristic('battery', 'level');\n     * if (characteristic) {\n     *   console.log('Characteristic found');\n     * }\n     */\n    getCharacteristic = (serviceId, characteristicId) => {\n        // Find the service with the specified serviceId\n        const boardService = this.services.find((service) => service.id === serviceId);\n        if (boardService) {\n            // If the service is found, find the characteristic with the specified characteristicId\n            const boardCharacteristic = boardService.characteristics.find((characteristic) => characteristic.id === characteristicId);\n            if (boardCharacteristic) {\n                // If the characteristic is found, return it\n                return boardCharacteristic.characteristic;\n            }\n        }\n        // Return undefined if the service or characteristic is not found\n        return undefined;\n    };\n    /**\n     * Handles notifications received from a characteristic.\n     * @param {BluetoothRemoteGATTCharacteristic} characteristic - The notification event.\n     *\n     * @example\n     * device.handleNotifications(someCharacteristic);\n     */\n    handleNotifications = (characteristic) => {\n        const value = characteristic.value;\n        if (!value)\n            return;\n        this.updateTimestamp();\n        // Received notification data\n        console.log(value);\n    };\n    /**\n     * Checks if a Bluetooth device is connected.\n     * @returns {boolean} A boolean indicating whether the device is connected.\n     * @public\n     *\n     * @example\n     * if (device.isConnected()) {\n     *   console.log('Device is connected');\n     * } else {\n     *   console.log('Device is not connected');\n     * }\n     */\n    isConnected = () => {\n        // Check if the device is defined and available\n        if (!this?.bluetooth) {\n            return false;\n        }\n        // Check if the device is connected\n        return !!this.bluetooth.gatt?.connected;\n    };\n    /**\n     * Sets the callback function to be called when notifications are received.\n     * @param {NotifyCallback} callback - The callback function to be set.\n     * @returns {void}\n     * @public\n     *\n     * @example\n     * device.notify((data) => {\n     *   console.log('Received notification:', data);\n     * });\n     */\n    notify = (callback) => {\n        this.notifyCallback = callback;\n    };\n    /**\n     * Handles the 'connected' event.\n     * @param {Function} onSuccess - Callback function to execute on successful connection.\n     * @public\n     *\n     * @example\n     * device.onConnected(() => {\n     *   console.log('Device connected successfully');\n     * });\n     */\n    onConnected = async (onSuccess) => {\n        this.updateTimestamp();\n        if (!this.server) {\n            throw new Error(\"GATT server is not available\");\n        }\n        // Connect to GATT server and set up characteristics\n        const services = await this.server.getPrimaryServices();\n        if (!services || services.length === 0) {\n            throw new Error(\"No services found\");\n        }\n        for (const service of services) {\n            const matchingService = this.services.find((boardService) => boardService.uuid === service.uuid);\n            if (matchingService) {\n                // Android bug: Introduce a delay before getting characteristics\n                await new Promise((resolve) => setTimeout(resolve, 100));\n                const characteristics = await service.getCharacteristics();\n                for (const characteristic of matchingService.characteristics) {\n                    const matchingCharacteristic = characteristics.find((char) => char.uuid === characteristic.uuid);\n                    if (matchingCharacteristic) {\n                        const element = matchingService.characteristics.find((char) => char.uuid === matchingCharacteristic.uuid);\n                        if (element) {\n                            element.characteristic = matchingCharacteristic;\n                            // TODO: remove device-specific logic\n                            if (element.id === \"rx\") {\n                                matchingCharacteristic.startNotifications();\n                                const listener = (event) => {\n                                    const target = event.target;\n                                    if (target && target.value) {\n                                        this.handleNotifications(target);\n                                    }\n                                };\n                                matchingCharacteristic.addEventListener(\"characteristicvaluechanged\", listener);\n                                this.notificationListeners.set(element.uuid, listener);\n                            }\n                        }\n                    }\n                    else {\n                        throw new Error(`Characteristic ${characteristic.uuid} not found in service ${service.uuid}`);\n                    }\n                }\n            }\n        }\n        // Call the onSuccess callback after successful connection and setup\n        onSuccess();\n    };\n    /**\n     * Handles the 'disconnected' event.\n     * @param {Event} event - The 'disconnected' event.\n     * @public\n     *\n     * @example\n     * device.onDisconnected(event);\n     */\n    onDisconnected = (event) => {\n        console.warn(`Device ${event.target.name} is disconnected.`);\n        this.disconnect();\n    };\n    /**\n     * Reads the value of the specified characteristic from the device.\n     * @param {string} serviceId - The service ID where the characteristic belongs.\n     * @param {string} characteristicId - The characteristic ID to read from.\n     * @param {number} [duration=0] - The duration to wait before resolving the promise, in milliseconds.\n     * @returns {Promise<string | undefined>} A promise that resolves when the read operation is completed.\n     * @public\n     *\n     * @example\n     * const value = await device.read('battery', 'level', 1000);\n     * console.log('Battery level:', value);\n     */\n    read = async (serviceId, characteristicId, duration = 0) => {\n        if (!this.isConnected()) {\n            return undefined;\n        }\n        // Get the characteristic from the service\n        const characteristic = this.getCharacteristic(serviceId, characteristicId);\n        if (!characteristic) {\n            throw new Error(`Characteristic \"${characteristicId}\" not found in service \"${serviceId}\"`);\n        }\n        this.updateTimestamp();\n        // Decode the value based on characteristicId and serviceId\n        let decodedValue;\n        const decoder = new TextDecoder(\"utf-8\");\n        // Read the value from the characteristic\n        const value = await characteristic.readValue();\n        if ((serviceId === \"battery\" || serviceId === \"humidity\" || serviceId === \"temperature\") &&\n            characteristicId === \"level\") {\n            // This is battery-specific; return the first byte as the level\n            decodedValue = value.getUint8(0).toString();\n        }\n        else {\n            // Otherwise use a UTF-8 decoder\n            decodedValue = decoder.decode(value);\n        }\n        // Wait for the specified duration before returning the result\n        if (duration > 0) {\n            await new Promise((resolve) => setTimeout(resolve, duration));\n        }\n        return decodedValue;\n    };\n    /**\n     * Initiates the tare calibration process.\n     * @param {number} duration - The duration time for tare calibration.\n     * @returns {boolean} A boolean indicating whether the tare calibration was successful.\n     * @public\n     *\n     * @example\n     * const success = device.tare(5000);\n     * if (success) {\n     *   console.log('Tare calibration started');\n     * } else {\n     *   console.log('Tare calibration failed to start');\n     * }\n     */\n    tare(duration = 5000) {\n        if (this.tareActive)\n            return false;\n        this.updateTimestamp();\n        this.tareActive = true;\n        this.tareDuration = duration;\n        this.tareSamples = [];\n        this.tareStartTime = Date.now();\n        return true;\n    }\n    /**\n     * Apply tare calibration to the provided sample.\n     * @param {number} sample - The sample to calibrate.\n     * @returns {number} The calibrated tare value.\n     * @protected\n     *\n     * @example\n     * const calibratedSample = device.applyTare(rawSample);\n     * console.log('Calibrated sample:', calibratedSample);\n     */\n    applyTare(sample) {\n        if (this.tareActive && this.tareStartTime) {\n            // Add current sample to the tare samples array\n            this.tareSamples.push(sample);\n            // Check if the tare calibration duration has passed\n            if (Date.now() - this.tareStartTime >= this.tareDuration) {\n                // Calculate the average of the tare samples\n                const total = this.tareSamples.reduce((acc, sample) => acc + sample, 0);\n                this.tareCurrent = total / this.tareSamples.length;\n                // Reset the tare calibration process\n                this.tareActive = false;\n                this.tareStartTime = null;\n                this.tareSamples = [];\n            }\n        }\n        // Return the current tare-adjusted value\n        return this.tareCurrent;\n    }\n    /**\n     * Updates the timestamp of the last device interaction.\n     * This method sets the updatedAt property to the current date and time.\n     * @protected\n     *\n     * @example\n     * device.updateTimestamp();\n     * console.log('Last updated:', device.updatedAt);\n     */\n    updateTimestamp = () => {\n        this.updatedAt = new Date();\n    };\n    /**\n     * Writes a message to the specified characteristic of a Bluetooth device and optionally provides a callback to handle responses.\n     * @param {string} serviceId - The service UUID of the Bluetooth device containing the target characteristic.\n     * @param {string} characteristicId - The characteristic UUID where the message will be written.\n     * @param {string | Uint8Array | undefined} message - The message to be written to the characteristic. It can be a string or a Uint8Array.\n     * @param {number} [duration=0] - Optional. The time in milliseconds to wait before resolving the promise. Defaults to 0 for immediate resolution.\n     * @param {WriteCallback} [callback=writeCallback] - Optional. A custom callback to handle the response after the write operation is successful.\n     * @returns {Promise<void>} A promise that resolves once the write operation is complete.\n     * @public\n     * @throws {Error} Throws an error if the characteristic is undefined.\n     *\n     * @example\n     * // Example usage of the write function with a custom callback\n     * await Progressor.write(\"progressor\", \"tx\", ProgressorCommands.GET_BATT_VLTG, 250, (data) => {\n     *   console.log(`Battery voltage: ${data}`);\n     * });\n     */\n    write = async (serviceId, characteristicId, message, duration = 0, callback = this.writeCallback) => {\n        // Check if not connected or no message is provided\n        if (!this.isConnected() || message === undefined) {\n            return Promise.resolve();\n        }\n        // Get the characteristic from the service\n        const characteristic = this.getCharacteristic(serviceId, characteristicId);\n        if (!characteristic) {\n            throw new Error(`Characteristic \"${characteristicId}\" not found in service \"${serviceId}\"`);\n        }\n        this.updateTimestamp();\n        // Convert the message to Uint8Array if it's a string\n        const valueToWrite = typeof message === \"string\" ? new TextEncoder().encode(message) : message;\n        // Write the value to the characteristic\n        await characteristic.writeValue(valueToWrite);\n        // Update the last written message\n        this.writeLast = message;\n        // Assign the provided callback to `writeCallback`\n        this.writeCallback = callback;\n        // If a duration is specified, resolve the promise after the duration\n        if (duration > 0) {\n            await new Promise((resolve) => setTimeout(resolve, duration));\n        }\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a Climbro device.\n * TODO: Add services, do you own a Climbro? Help us!\n * {@link https://climbro.com/}\n */\nexport class Climbro extends Device {\n    constructor() {\n        super({\n            filters: [{ name: \"Climbro\" }],\n            services: [],\n        });\n    }\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a Entralpi device.\n * {@link https://entralpi.com}\n */\nexport class Entralpi extends Device {\n    constructor() {\n        super({\n            filters: [\n                {\n                    name: \"ENTRALPI\",\n                },\n            ],\n            services: [\n                {\n                    name: \"Device Information\",\n                    id: \"device\",\n                    uuid: \"0000180a-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"System ID\",\n                            id: \"system\",\n                            uuid: \"00002a23-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Model Number String\",\n                            id: \"model\",\n                            uuid: \"00002a24-0000-1000-8000-00805f9b34fb\",\n                        },\n                        // {\n                        //   name: \"Serial Number String (Blocked)\",\n                        //   id: \"serial\",\n                        //   uuid: \"00002a25-0000-1000-8000-00805f9b34fb\",\n                        // },\n                        {\n                            name: \"Firmware Revision String\",\n                            id: \"firmware\",\n                            uuid: \"00002a26-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Hardware Revision String\",\n                            id: \"hardware\",\n                            uuid: \"00002a27-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Software Revision String\",\n                            id: \"software\",\n                            uuid: \"00002a28-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Manufacturer Name String\",\n                            id: \"manufacturer\",\n                            uuid: \"00002a29-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"IEEE 11073-20601 Regulatory Certification Data List\",\n                            id: \"certification\",\n                            uuid: \"00002a2a-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"PnP ID\",\n                            id: \"pnp\",\n                            uuid: \"00002a50-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Battery Service\",\n                    id: \"battery\",\n                    uuid: \"0000180f-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"Battery Level\",\n                            id: \"level\",\n                            uuid: \"00002a19-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Generic Attribute\",\n                    id: \"attribute\",\n                    uuid: \"f000ffc0-0451-4000-b000-000000000000\",\n                    characteristics: [\n                        {\n                            name: \"\",\n                            id: \"\",\n                            uuid: \"f000ffc1-0451-4000-b000-000000000000\",\n                        },\n                        {\n                            name: \"\",\n                            id: \"\",\n                            uuid: \"f000ffc2-0451-4000-b000-000000000000\",\n                        },\n                    ],\n                },\n                {\n                    name: \"UART ISSC Transparent Service\",\n                    id: \"uart\",\n                    uuid: \"0000fff0-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"TX\",\n                            id: \"tx\",\n                            uuid: \"0000fff1-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"RX\",\n                            id: \"rx\",\n                            uuid: \"0000fff4-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Weight Scale\",\n                    id: \"weight\",\n                    uuid: \"0000181d-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"notify\",\n                            id: \"rx\",\n                            uuid: \"0000fff1-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n            ],\n        });\n    }\n    /**\n     * Retrieves battery or voltage information from the device.\n     * @returns {Promise<string | undefined>} A Promise that resolves with the battery or voltage information.\n     */\n    battery = async () => {\n        return await this.read(\"battery\", \"level\", 250);\n    };\n    /**\n     * Retrieves IEEE 11073-20601 Regulatory Certification from the device.\n     * @returns {Promise<string>} A Promise that resolves with the certification.\n     */\n    certification = async () => {\n        return await this.read(\"device\", \"certification\", 250);\n    };\n    /**\n     * Retrieves firmware version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the firmware version.\n     */\n    firmware = async () => {\n        return await this.read(\"device\", \"firmware\", 250);\n    };\n    /**\n     * Handles data received from the device, processes weight measurements,\n     * and updates mass data including maximum and average values.\n     * It also handles command responses for retrieving device information.\n     *\n     * @param {BluetoothRemoteGATTCharacteristic} characteristic - The notification event.\n     */\n    handleNotifications = (characteristic) => {\n        const value = characteristic.value;\n        if (value) {\n            // Update timestamp\n            this.updateTimestamp();\n            if (value.buffer) {\n                const receivedTime = Date.now();\n                const receivedData = (value.getUint16(0) / 100).toFixed(1);\n                const convertedData = Number(receivedData);\n                // Adjust weight by using the tare value\n                // If tare is 0, use the original weight, otherwise subtract tare and invert.\n                // This will display the removed or 'no-hanging' weight.\n                const tare = this.applyTare(convertedData);\n                const numericData = tare === 0 ? convertedData : (convertedData - tare) * -1;\n                // Add data to downloadable Array\n                this.downloadPackets.push({\n                    received: receivedTime,\n                    sampleNum: this.dataPointCount,\n                    battRaw: 0,\n                    samples: [convertedData],\n                    masses: [numericData],\n                });\n                // Update massMax\n                this.massMax = Math.max(Number(this.massMax), numericData).toFixed(1);\n                // Update running sum and count\n                const currentMassTotal = Math.max(-1000, numericData);\n                this.massTotalSum += currentMassTotal;\n                this.dataPointCount++;\n                // Calculate the average dynamically\n                this.massAverage = (this.massTotalSum / this.dataPointCount).toFixed(1);\n                // Check if device is being used\n                this.activityCheck(numericData);\n                // Notify with weight data\n                this.notifyCallback({\n                    massMax: this.massMax,\n                    massAverage: this.massAverage,\n                    massTotal: Math.max(-1000, numericData).toFixed(1),\n                });\n            }\n        }\n    };\n    /**\n     * Retrieves hardware version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the hardware version.\n     */\n    hardware = async () => {\n        return await this.read(\"device\", \"hardware\", 250);\n    };\n    /**\n     * Retrieves manufacturer information from the device.\n     * @returns {Promise<string>} A Promise that resolves with the manufacturer information.\n     */\n    manufacturer = async () => {\n        return await this.read(\"device\", \"manufacturer\", 250);\n    };\n    /**\n     * Retrieves model number from the device.\n     * @returns {Promise<string>} A Promise that resolves with the model number.\n     */\n    model = async () => {\n        return await this.read(\"device\", \"model\", 250);\n    };\n    /**\n     * Retrieves PnP ID from the device, a set of values that used to create a device ID value that is unique for this device.\n     * Included in the characteristic is a Vendor ID Source field, a Vendor ID field, a Product ID field and a Product Version field\n     * @returns {Promise<string>} A Promise that resolves with the PnP ID.\n     */\n    pnp = async () => {\n        return await this.read(\"device\", \"pnp\", 250);\n    };\n    /**\n     * Retrieves software version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the software version.\n     */\n    software = async () => {\n        return await this.read(\"device\", \"software\", 250);\n    };\n    /**\n     * Retrieves system id from the device.\n     * @returns {Promise<string>} A Promise that resolves with the system id.\n     */\n    system = async () => {\n        return await this.read(\"device\", \"system\", 250);\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a PitchSix Force Board device.\n * {@link https://pitchsix.com}\n */\nexport class ForceBoard extends Device {\n    constructor() {\n        super({\n            filters: [{ name: \"Force Board\" }],\n            services: [\n                {\n                    name: \"Device Information\",\n                    id: \"device\",\n                    uuid: \"0000180a-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        // {\n                        //   name: \"Serial Number String (Blocked)\",\n                        //   id: \"serial\",\n                        //   uuid: \"00002a25-0000-1000-8000-00805f9b34fb\",\n                        // },\n                        // {\n                        //   name: \"Firmware Revision String (Blocked)\",\n                        //   id: \"firmware\",\n                        //   uuid: \"00002a26-0000-1000-8000-00805f9b34f\",\n                        // },\n                        {\n                            name: \"Manufacturer Name String\",\n                            id: \"manufacturer\",\n                            uuid: \"00002a29-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Battery Service\",\n                    id: \"battery\",\n                    uuid: \"0000180f-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"Battery Level\",\n                            id: \"level\",\n                            uuid: \"00002a19-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Nordic Device Firmware Update (DFU) Service\",\n                    id: \"dfu\",\n                    uuid: \"0000fe59-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"Buttonless DFU\",\n                            id: \"dfu\",\n                            uuid: \"8ec90003-f315-4f60-9fb8-838830daea50\",\n                        },\n                    ],\n                },\n                {\n                    name: \"\",\n                    id: \"\",\n                    uuid: \"f3641400-00b0-4240-ba50-05ca45bf8abc\",\n                    characteristics: [\n                        {\n                            name: \"Read + Indicate\",\n                            id: \"\",\n                            uuid: \"f3641401-00b0-4240-ba50-05ca45bf8abc\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Humidity Service\",\n                    id: \"humidity\",\n                    uuid: \"cf194c6f-d0c1-47b2-aeff-dc610f09bd18\",\n                    characteristics: [\n                        {\n                            name: \"Humidity Level\",\n                            id: \"level\",\n                            uuid: \"cf194c70-d0c1-47b2-aeff-dc610f09bd18\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Temperature Serivce\",\n                    id: \"temperature\",\n                    uuid: \"3a90328c-c266-4c76-b05a-6af6104a0b13\",\n                    characteristics: [\n                        {\n                            name: \"Read\",\n                            id: \"level\",\n                            uuid: \"3a90328d-c266-4c76-b05a-6af6104a0b13\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Forceboard Service\",\n                    id: \"forceboard\",\n                    uuid: \"9a88d67f-8df2-4afe-9e0d-c2bbbe773dd0\",\n                    characteristics: [\n                        {\n                            name: \"Write\",\n                            id: \"\",\n                            uuid: \"9a88d680-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Read + Indicate\",\n                            id: \"\",\n                            uuid: \"9a88d681-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Read + Notify\",\n                            id: \"rx\",\n                            uuid: \"9a88d682-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Write\",\n                            id: \"\",\n                            uuid: \"9a88d683-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Read\",\n                            id: \"\",\n                            uuid: \"9a88d685-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Write\",\n                            id: \"\",\n                            uuid: \"9a88d686-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Read + Write\",\n                            id: \"\",\n                            uuid: \"9a88d687-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Serial / Read + Write\",\n                            id: \"\",\n                            uuid: \"9a88d688-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                        {\n                            name: \"Read + Write\",\n                            id: \"\",\n                            uuid: \"9a88d689-8df2-4afe-9e0d-c2bbbe773dd0\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Weight Serivce\",\n                    id: \"weight\",\n                    uuid: \"467a8516-6e39-11eb-9439-0242ac130002\",\n                    characteristics: [\n                        {\n                            name: \"Read + Write\",\n                            id: \"tx\",\n                            uuid: \"467a8517-6e39-11eb-9439-0242ac130002\",\n                        },\n                        {\n                            name: \"Read + Write\",\n                            id: \"\",\n                            uuid: \"467a8518-6e39-11eb-9439-0242ac130002\",\n                        },\n                    ],\n                },\n            ],\n            commands: {\n                STOP_WEIGHT_MEAS: \"\",\n            },\n        });\n    }\n    /**\n     * Retrieves battery or voltage information from the device.\n     * @returns {Promise<string | undefined>} A Promise that resolves with the battery or voltage information,\n     */\n    battery = async () => {\n        return await this.read(\"battery\", \"level\", 250);\n    };\n    /**\n     * Handles data received from the device, processes weight measurements,\n     * and updates mass data including maximum and average values.\n     * It also handles command responses for retrieving device information.\n     *\n     * @param {BluetoothRemoteGATTCharacteristic} characteristic - The notification event.\n     */\n    handleNotifications = (characteristic) => {\n        const value = characteristic.value;\n        if (value) {\n            // Update timestamp\n            this.updateTimestamp();\n            if (value.buffer) {\n                const receivedTime = Date.now();\n                const dataArray = new Uint8Array(value.buffer);\n                // Skip the first 2 bytes, which are the command and length\n                // The data is sent in groups of 3 bytes\n                for (let i = 2; i < dataArray.length; i += 3) {\n                    const receivedData = (dataArray[i] << 16) | (dataArray[i + 1] << 8) | dataArray[i + 2];\n                    // Convert from LBS to KG\n                    const convertedReceivedData = receivedData * 0.453592;\n                    // Tare correction\n                    const numericData = convertedReceivedData - this.applyTare(convertedReceivedData);\n                    // Add data to downloadable Array\n                    this.downloadPackets.push({\n                        received: receivedTime,\n                        sampleNum: this.dataPointCount,\n                        battRaw: 0,\n                        samples: [convertedReceivedData],\n                        masses: [numericData],\n                    });\n                    // Update massMax\n                    this.massMax = Math.max(Number(this.massMax), numericData).toFixed(1);\n                    // Update running sum and count\n                    const currentMassTotal = Math.max(-1000, numericData);\n                    this.massTotalSum += currentMassTotal;\n                    this.dataPointCount++;\n                    // Calculate the average dynamically\n                    this.massAverage = (this.massTotalSum / this.dataPointCount).toFixed(1);\n                    // Check if device is being used\n                    this.activityCheck(numericData);\n                    // Notify with weight data\n                    this.notifyCallback({\n                        massMax: this.massMax,\n                        massAverage: this.massAverage,\n                        massTotal: Math.max(-1000, numericData).toFixed(1),\n                    });\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves humidity level from the device.\n     * @returns {Promise<string>} A Promise that resolves with the humidity level,\n     */\n    humidity = async () => {\n        return await this.read(\"humidity\", \"level\", 250);\n    };\n    /**\n     * Retrieves manufacturer information from the device.\n     * @returns {Promise<string>} A Promise that resolves with the manufacturer information,\n     */\n    manufacturer = async () => {\n        return await this.read(\"device\", \"manufacturer\", 250);\n    };\n    /**\n     * Stops the data stream on the specified device.\n     * @returns {Promise<void>} A promise that resolves when the stream is stopped.\n     */\n    stop = async () => {\n        await this.write(\"weight\", \"tx\", this.commands.STOP_WEIGHT_MEAS, 0);\n    };\n    /**\n     * Starts streaming data from the specified device.\n     * @param {number} [duration=0] - The duration of the stream in milliseconds. If set to 0, stream will continue indefinitely.\n     * @returns {Promise<void>} A promise that resolves when the streaming operation is completed.\n     */\n    stream = async (duration = 0) => {\n        // Reset download packets\n        this.downloadPackets.length = 0;\n        // Start streaming data\n        await this.write(\"weight\", \"tx\", new Uint8Array([0x04]), duration); // ASCII control character EOT (End of Transmission)\n        // Stop streaming if duration is set\n        if (duration !== 0) {\n            await this.stop();\n        }\n    };\n    /**\n     * Retrieves temperature information from the device.\n     * @returns {Promise<string>} A Promise that resolves with the manufacturer information,\n     */\n    temperature = async () => {\n        return await this.read(\"temperature\", \"level\", 250);\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * For API level 2 and API level 3.\n * The first byte in the data is dependent on where the packet is in the message as a whole.\n * More details: https://github.com/1-max-1/fake_kilter_board\n */\nexport var KilterBoardPacket;\n(function (KilterBoardPacket) {\n    /** If this packet is in the middle, the byte gets set to 77 (M). */\n    KilterBoardPacket[KilterBoardPacket[\"V2_MIDDLE\"] = 77] = \"V2_MIDDLE\";\n    /** If this packet is the first packet in the message, then this byte gets set to 78 (N). */\n    KilterBoardPacket[KilterBoardPacket[\"V2_FIRST\"] = 78] = \"V2_FIRST\";\n    /** If this is the last packet in the message, this byte gets set to 79 (0). */\n    KilterBoardPacket[KilterBoardPacket[\"V2_LAST\"] = 79] = \"V2_LAST\";\n    /** If this packet is the only packet in the message, the byte gets set to 80 (P). Note that this takes priority over the other conditions. */\n    KilterBoardPacket[KilterBoardPacket[\"V2_ONLY\"] = 80] = \"V2_ONLY\";\n    /** If this packet is in the middle, the byte gets set to 81 (Q). */\n    KilterBoardPacket[KilterBoardPacket[\"V3_MIDDLE\"] = 81] = \"V3_MIDDLE\";\n    /** If this packet is the first packet in the message, then this byte gets set to 82 (R). */\n    KilterBoardPacket[KilterBoardPacket[\"V3_FIRST\"] = 82] = \"V3_FIRST\";\n    /** If this is the last packet in the message, this byte gets set to 83 (S). */\n    KilterBoardPacket[KilterBoardPacket[\"V3_LAST\"] = 83] = \"V3_LAST\";\n    /** If this packet is the only packet in the message, the byte gets set to 84 (T). Note that this takes priority over the other conditions. */\n    KilterBoardPacket[KilterBoardPacket[\"V3_ONLY\"] = 84] = \"V3_ONLY\";\n})(KilterBoardPacket || (KilterBoardPacket = {}));\n/**\n * Extracted from placement_roles database table.\n */\nexport const KilterBoardPlacementRoles = [\n    {\n        id: 12,\n        product_id: 1,\n        position: 1,\n        name: \"start\",\n        full_name: \"Start\",\n        led_color: \"00FF00\",\n        screen_color: \"00DD00\",\n    },\n    {\n        id: 13,\n        product_id: 1,\n        position: 2,\n        name: \"middle\",\n        full_name: \"Middle\",\n        led_color: \"00FFFF\",\n        screen_color: \"00FFFF\",\n    },\n    {\n        id: 14,\n        product_id: 1,\n        position: 3,\n        name: \"finish\",\n        full_name: \"Finish\",\n        led_color: \"FF00FF\",\n        screen_color: \"FF00FF\",\n    },\n    {\n        id: 15,\n        product_id: 1,\n        position: 4,\n        name: \"foot\",\n        full_name: \"Foot Only\",\n        led_color: \"FFB600\",\n        screen_color: \"FFA500\",\n    },\n];\n/**\n * Represents a Aurora Climbing device.\n * Kilter Board, Tension Board, Decoy Board, Touchstone Board, Grasshopper Board, Aurora Board, So iLL Board\n * {@link https://auroraclimbing.com}\n */\nexport class KilterBoard extends Device {\n    /**\n     * UUID for the Aurora Climbing Advertising service.\n     * This constant is used to identify the specific Bluetooth service for Kilter Boards.\n     * @type {string}\n     * @static\n     * @readonly\n     * @constant\n     */\n    static AuroraUUID = \"4488b571-7806-4df6-bcff-a2897e4953ff\";\n    /**\n     * Maximum length of the message body for byte wrapping.\n     * This value defines the limit for the size of messages that can be sent or received\n     * to ensure proper byte wrapping in communication.\n     * @type {number}\n     * @private\n     * @readonly\n     * @constant\n     */\n    static messageBodyMaxLength = 255;\n    /**\n     * Maximum length of the Bluetooth message chunk.\n     * This value sets the upper limit for the size of individual Bluetooth messages\n     * sent to and from the device to comply with Bluetooth protocol constraints.\n     * @type {number}\n     * @private\n     * @readonly\n     * @constant\n     */\n    static maxBluetoothMessageSize = 20;\n    constructor() {\n        super({\n            filters: [\n                {\n                    services: [KilterBoard.AuroraUUID],\n                },\n            ],\n            services: [\n                {\n                    name: \"UART Nordic Service\",\n                    id: \"uart\",\n                    uuid: \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n                    characteristics: [\n                        {\n                            name: \"TX\",\n                            id: \"tx\",\n                            uuid: \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",\n                        },\n                        // {\n                        //   name: \"RX\",\n                        //   id: \"rx\",\n                        //   uuid: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\",\n                        // },\n                    ],\n                },\n            ],\n        });\n    }\n    /**\n     * Calculates the checksum for a byte array by summing up all bytes ot hre packet in a single-byte variable.\n     * @param data - The array of bytes to calculate the checksum for.\n     * @returns {number} The calculated checksum value.\n     */\n    checksum(data) {\n        let i = 0;\n        for (const value of data) {\n            i = (i + value) & 255;\n        }\n        return ~i & 255;\n    }\n    /**\n     * Wraps a byte array with header and footer bytes for transmission.\n     * @param data - The array of bytes to wrap.\n     * @returns {number[]} The wrapped byte array.\n     */\n    wrapBytes(data) {\n        if (data.length > KilterBoard.messageBodyMaxLength) {\n            return [];\n        }\n        /**\n      - 0x1\n      - len(packets)\n      - checksum(packets)\n      - 0x2\n      - *packets\n      - 0x3\n    \n      First byte is always 1, the second is a number of packets, then checksum, then 2, packets themselves, and finally 3.\n       */\n        return [1, data.length, this.checksum(data), 2, ...data, 3];\n    }\n    /**\n     * Encodes a position into a byte array.\n     * The lowest 8 bits of the position get put in the first byte of the group.\n     * The highest 8 bits of the position get put in the second byte of the group.\n     * @param position - The position to encode.\n     * @returns {number[]} The encoded byte array representing the position.\n     */\n    encodePosition(position) {\n        const position1 = position & 255;\n        const position2 = (position & 65280) >> 8;\n        return [position1, position2];\n    }\n    /**\n     * Encodes a color string into a numeric representation.\n     * The rgb color, 3 bits for the R and G components, 2 bits for the B component, with the 3 R bits occupying the high end of the byte and the 2 B bits in the low end (hence 3 G bits in the middle).\n     * @param color - The color string in hexadecimal format (e.g., 'FFFFFF').\n     * @returns The encoded /compressed color value.\n     */\n    encodeColor(color) {\n        const substring = color.substring(0, 2);\n        const substring2 = color.substring(2, 4);\n        const parsedSubstring = parseInt(substring, 16) / 32;\n        const parsedSubstring2 = parseInt(substring2, 16) / 32;\n        const parsedResult = (parsedSubstring << 5) | (parsedSubstring2 << 2);\n        const substring3 = color.substring(4, 6);\n        const parsedSubstring3 = parseInt(substring3, 16) / 64;\n        const finalParsedResult = parsedResult | parsedSubstring3;\n        return finalParsedResult;\n    }\n    /**\n     * Encodes a placement (requires a 16-bit position and a 24-bit rgb color. ) into a byte array.\n     * @param position - The position to encode.\n     * @param ledColor - The color of the LED in hexadecimal format (e.g., 'FFFFFF').\n     * @returns The encoded byte array representing the placement.\n     */\n    encodePlacement(position, ledColor) {\n        return [...this.encodePosition(position), this.encodeColor(ledColor)];\n    }\n    /**\n     * Prepares byte arrays for transmission based on a list of climb placements.\n     * @param {{ position: number; role_id: number }[]} climbPlacementList - The list of climb placements containing position and role ID.\n     * @returns {number[]} The final byte array ready for transmission.\n     */\n    prepBytesV3(climbPlacementList) {\n        const resultArray = [];\n        let tempArray = [KilterBoardPacket.V3_MIDDLE];\n        for (const climbPlacement of climbPlacementList) {\n            if (tempArray.length + 3 > KilterBoard.messageBodyMaxLength) {\n                resultArray.push(tempArray);\n                tempArray = [KilterBoardPacket.V3_MIDDLE];\n            }\n            const role = KilterBoardPlacementRoles.find((placement) => placement.id === climbPlacement.role_id);\n            if (!role) {\n                throw new Error(`Role with id ${climbPlacement.role_id} not found in placement_roles`);\n            }\n            const encodedPlacement = this.encodePlacement(climbPlacement.position, role.led_color);\n            tempArray.push(...encodedPlacement);\n        }\n        resultArray.push(tempArray);\n        if (resultArray.length === 1) {\n            resultArray[0][0] = KilterBoardPacket.V3_ONLY;\n        }\n        else if (resultArray.length > 1) {\n            resultArray[0][0] = KilterBoardPacket.V3_FIRST;\n            resultArray[resultArray.length - 1][0] = KilterBoardPacket.V3_LAST;\n        }\n        const finalResultArray = [];\n        for (const currentArray of resultArray) {\n            finalResultArray.push(...this.wrapBytes(currentArray));\n        }\n        return finalResultArray;\n    }\n    /**\n     * Splits a collection into slices of the specified length.\n     * https://github.com/ramda/ramda/blob/master/source/splitEvery.js\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array<number[]>}\n     */\n    splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error(\"First argument to splitEvery must be a positive integer\");\n        }\n        const result = [];\n        let idx = 0;\n        while (idx < list.length) {\n            result.push(list.slice(idx, (idx += n)));\n        }\n        return result;\n    }\n    /**\n     * The kilter board only supports messages of 20 bytes\n     * at a time. This method splits a full message into parts\n     * of 20 bytes\n     *\n     * @param buffer\n     */\n    splitMessages = (buffer) => this.splitEvery(KilterBoard.maxBluetoothMessageSize, buffer).map((arr) => new Uint8Array(arr));\n    /**\n     * Sends a series of messages to a device.\n     */\n    async writeMessageSeries(messages) {\n        for (const message of messages) {\n            await this.write(\"uart\", \"tx\", message);\n        }\n    }\n    /**\n     * Configures the LEDs based on an array of climb placements.\n     * @param {{ position: number; role_id: number }[]} config - Array of climb placements for the LEDs.\n     * @returns {Promise<number[] | undefined>} A promise that resolves with the payload array for the Kilter Board if LED settings were applied, or `undefined` if no action was taken or for the Motherboard.\n     */\n    led = async (config) => {\n        // Handle Kilterboard logic: process placements and send payload if connected\n        if (Array.isArray(config)) {\n            // Prepares byte arrays for transmission based on a list of climb placements.\n            const payload = this.prepBytesV3(config);\n            if (this.isConnected()) {\n                await this.writeMessageSeries(this.splitMessages(payload));\n            }\n            return payload;\n        }\n        return undefined;\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a Griptonite Motherboard device.\n * {@link https://griptonite.io}\n */\nexport class Motherboard extends Device {\n    /**\n     * Length of the packet received from the device.\n     * @type {number}\n     * @static\n     * @readonly\n     * @constant\n     */\n    static packetLength = 32;\n    /**\n     * Number of samples contained in the data packet.\n     * @type {number}\n     * @static\n     * @readonly\n     * @constant\n     */\n    static samplesNumber = 3;\n    /**\n     * Buffer to store received data from the device.\n     * @type {number[]}\n     * @private\n     */\n    receiveBuffer = [];\n    /**\n     * Calibration data for each sensor of the device.\n     * @type {number[][][]}\n     * @private\n     */\n    calibrationData = [[], [], [], []];\n    constructor() {\n        super({\n            filters: [{ name: \"Motherboard\" }],\n            services: [\n                {\n                    name: \"Device Information\",\n                    id: \"device\",\n                    uuid: \"0000180a-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        // {\n                        //     name: 'Serial Number String (Blocked)',\n                        //     id: 'serial'\n                        //     uuid: '00002a25-0000-1000-8000-00805f9b34fb'\n                        // },\n                        {\n                            name: \"Firmware Revision String\",\n                            id: \"firmware\",\n                            uuid: \"00002a26-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Hardware Revision String\",\n                            id: \"hardware\",\n                            uuid: \"00002a27-0000-1000-8000-00805f9b34fb\",\n                        },\n                        {\n                            name: \"Manufacturer Name String\",\n                            id: \"manufacturer\",\n                            uuid: \"00002a29-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Battery Service\",\n                    id: \"battery\",\n                    uuid: \"0000180f-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"Battery Level\",\n                            id: \"level\",\n                            uuid: \"00002a19-0000-1000-8000-00805f9b34fb\",\n                        },\n                    ],\n                },\n                {\n                    name: \"LED Service\",\n                    id: \"led\",\n                    uuid: \"10ababcd-15e1-28ff-de13-725bea03b127\",\n                    characteristics: [\n                        {\n                            name: \"Red LED\",\n                            id: \"red\",\n                            uuid: \"10ab1524-15e1-28ff-de13-725bea03b127\",\n                        },\n                        {\n                            name: \"Green LED\",\n                            id: \"green\",\n                            uuid: \"10ab1525-15e1-28ff-de13-725bea03b127\",\n                        },\n                    ],\n                },\n                {\n                    name: \"UART Nordic Service\",\n                    id: \"uart\",\n                    uuid: \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n                    characteristics: [\n                        {\n                            name: \"TX\",\n                            id: \"tx\",\n                            uuid: \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",\n                        },\n                        {\n                            name: \"RX\",\n                            id: \"rx\",\n                            uuid: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\",\n                        },\n                    ],\n                },\n            ],\n            commands: {\n                GET_SERIAL: \"#\",\n                START_WEIGHT_MEAS: \"S30\",\n                STOP_WEIGHT_MEAS: \"\", // All commands will stop the data stream.\n                GET_CALIBRATION: \"C\",\n                SLEEP: 0,\n                GET_TEXT: \"T\",\n                DEBUG_STREAM: \"D\",\n            },\n        });\n    }\n    /**\n     * Applies calibration to a sample value.\n     * @param {number} sample - The sample value to calibrate.\n     * @param {number[][]} calibration - The calibration data.\n     * @returns {number} The calibrated sample value.\n     */\n    applyCalibration = (sample, calibration) => {\n        // Extract the calibrated value for the zero point\n        const zeroCalibration = calibration[0][2];\n        // Initialize sign as positive\n        let sign = 1;\n        // Initialize the final calibrated value\n        let final = 0;\n        // If the sample value is less than the zero calibration point\n        if (sample < zeroCalibration) {\n            // Change the sign to negative\n            sign = -1;\n            // Reflect the sample around the zero calibration point\n            sample = /* 2 * zeroCalibration */ -sample;\n        }\n        // Iterate through the calibration data\n        for (let i = 1; i < calibration.length; i++) {\n            // Extract the lower and upper bounds of the current calibration range\n            const calibrationStart = calibration[i - 1][2];\n            const calibrationEnd = calibration[i][2];\n            // If the sample value is within the current calibration range\n            if (sample < calibrationEnd) {\n                // Interpolate to get the calibrated value within the range\n                final =\n                    calibration[i - 1][1] +\n                        ((sample - calibrationStart) / (calibrationEnd - calibrationStart)) *\n                            (calibration[i][1] - calibration[i - 1][1]);\n                break;\n            }\n        }\n        // Return the calibrated value with the appropriate sign (positive/negative)\n        return sign * final;\n    };\n    /**\n     * Retrieves battery or voltage information from the device.\n     * @returns {Promise<string | undefined>} A Promise that resolves with the battery or voltage information,\n     */\n    battery = async () => {\n        return await this.read(\"battery\", \"level\", 250);\n    };\n    /**\n     * Writes a command to get calibration data from the device.\n     * @returns {Promise<void>} A Promise that resolves when the command is successfully sent.\n     */\n    calibration = async () => {\n        await this.write(\"uart\", \"tx\", this.commands.GET_CALIBRATION, 2500, (data) => {\n            console.log(data);\n        });\n    };\n    /**\n     * Retrieves firmware version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the firmware version,\n     */\n    firmware = async () => {\n        return await this.read(\"device\", \"firmware\", 250);\n    };\n    /**\n     * Handles data received from the Motherboard device. Processes hex-encoded streaming packets\n     * to extract samples, calibrate masses, and update running averages of mass data.\n     * If the received data is not a valid hex packet, it returns the unprocessed data.\n     *\n     * @param {BluetoothRemoteGATTCharacteristic} characteristic - The notification event.\n     */\n    handleNotifications = (characteristic) => {\n        const value = characteristic.value;\n        if (value) {\n            // Update timestamp\n            this.updateTimestamp();\n            if (value.buffer) {\n                for (let i = 0; i < value.byteLength; i++) {\n                    this.receiveBuffer.push(value.getUint8(i));\n                }\n                let idx;\n                while ((idx = this.receiveBuffer.indexOf(10)) >= 0) {\n                    const line = this.receiveBuffer.splice(0, idx + 1).slice(0, -1); // Combine and remove LF\n                    if (line.length > 0 && line[line.length - 1] === 13)\n                        line.pop(); // Remove CR\n                    const decoder = new TextDecoder(\"utf-8\");\n                    const receivedData = decoder.decode(new Uint8Array(line));\n                    const receivedTime = Date.now();\n                    // Check if the line is entirely hex characters\n                    const isAllHex = /^[0-9A-Fa-f]+$/g.test(receivedData);\n                    // Handle streaming packet\n                    if (isAllHex && receivedData.length === Motherboard.packetLength) {\n                        // Base-16 decode the string: convert hex pairs to byte values\n                        const bytes = Array.from({ length: receivedData.length / 2 }, (_, i) => Number(`0x${receivedData.substring(i * 2, i * 2 + 2)}`));\n                        // Translate header into packet, number of samples from the packet length\n                        const packet = {\n                            received: receivedTime,\n                            sampleNum: new DataView(new Uint8Array(bytes).buffer).getUint16(0, true),\n                            battRaw: new DataView(new Uint8Array(bytes).buffer).getUint16(2, true),\n                            samples: [],\n                            masses: [],\n                        };\n                        const dataView = new DataView(new Uint8Array(bytes).buffer);\n                        for (let i = 0; i < Motherboard.samplesNumber; i++) {\n                            const sampleStart = 4 + 3 * i;\n                            // Use DataView to read the 24-bit unsigned integer\n                            const rawValue = dataView.getUint8(sampleStart) |\n                                (dataView.getUint8(sampleStart + 1) << 8) |\n                                (dataView.getUint8(sampleStart + 2) << 16);\n                            // Ensure unsigned 32-bit integer\n                            packet.samples[i] = rawValue >>> 0;\n                            if (packet.samples[i] >= 0x7fffff) {\n                                packet.samples[i] -= 0x1000000;\n                            }\n                            packet.masses[i] = this.applyCalibration(packet.samples[i], this.calibrationData[i]);\n                        }\n                        // invert center and right values\n                        packet.masses[1] *= -1;\n                        packet.masses[2] *= -1;\n                        // Add data to downloadable Array\n                        this.downloadPackets.push({\n                            received: packet.received,\n                            sampleNum: packet.battRaw,\n                            battRaw: packet.received,\n                            samples: [...packet.samples],\n                            masses: [...packet.masses],\n                        });\n                        let left = packet.masses[0];\n                        let center = packet.masses[1];\n                        let right = packet.masses[2];\n                        // Tare correction\n                        left -= this.applyTare(left);\n                        center -= this.applyTare(center);\n                        right -= this.applyTare(right);\n                        this.massMax = Math.max(Number(this.massMax), Math.max(-1000, left + center + right)).toFixed(1);\n                        // Update running sum and count\n                        const currentMassTotal = Math.max(-1000, left + center + right);\n                        this.massTotalSum += currentMassTotal;\n                        this.dataPointCount++;\n                        // Calculate the average dynamically\n                        this.massAverage = (this.massTotalSum / this.dataPointCount).toFixed(1);\n                        // Check if device is being used\n                        this.activityCheck(center);\n                        // Notify with weight data\n                        this.notifyCallback({\n                            massTotal: Math.max(-1000, left + center + right).toFixed(1),\n                            massMax: this.massMax,\n                            massAverage: this.massAverage,\n                            massLeft: Math.max(-1000, packet.masses[0]).toFixed(1),\n                            massCenter: Math.max(-1000, packet.masses[1]).toFixed(1),\n                            massRight: Math.max(-1000, packet.masses[2]).toFixed(1),\n                        });\n                    }\n                    else if (this.writeLast === this.commands.GET_CALIBRATION) {\n                        // check data integrity\n                        if ((receivedData.match(/,/g) || []).length === 3) {\n                            const parts = receivedData.split(\",\");\n                            const numericParts = parts.map((x) => parseFloat(x));\n                            this.calibrationData[numericParts[0]].push(numericParts.slice(1));\n                        }\n                    }\n                    else {\n                        // unhandled data\n                        this.writeCallback(receivedData);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves hardware version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the hardware version,\n     */\n    hardware = async () => {\n        return await this.read(\"device\", \"hardware\", 250);\n    };\n    /**\n     * Sets the LED color based on a single color option. Defaults to turning the LEDs off if no configuration is provided.\n     * @param {\"green\" | \"red\" | \"orange\"} [config] - Optional color or array of climb placements for the LEDs. Ignored if placements are provided.\n     * @returns {Promise<number[] | undefined>} A promise that resolves with the payload array for the Kilter Board if LED settings were applied, or `undefined` if no action was taken or for the Motherboard.\n     */\n    led = async (config) => {\n        if (this.isConnected()) {\n            const colorMapping = {\n                green: [[0x00], [0x01]],\n                red: [[0x01], [0x00]],\n                orange: [[0x01], [0x01]],\n                off: [[0x00], [0x00]],\n            };\n            // Default to \"off\" color if config is not set or not found in colorMapping\n            const color = typeof config === \"string\" && colorMapping[config] ? config : \"off\";\n            const [redValue, greenValue] = colorMapping[color];\n            await this.write(\"led\", \"red\", new Uint8Array(redValue));\n            await this.write(\"led\", \"green\", new Uint8Array(greenValue), 1250);\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves manufacturer information from the device.\n     * @returns {Promise<string>} A Promise that resolves with the manufacturer information,\n     */\n    manufacturer = async () => {\n        return await this.read(\"device\", \"manufacturer\", 250);\n    };\n    /**\n     * Retrieves serial number from the device.\n     * @returns {Promise<string>} A Promise that resolves with the serial number,\n     */\n    serial = async () => {\n        let response = undefined;\n        await this.write(\"uart\", \"tx\", this.commands.GET_SERIAL, 250, (data) => {\n            response = data;\n        });\n        return response;\n    };\n    /**\n     * Stops the data stream on the specified device.\n     * @returns {Promise<void>} A promise that resolves when the stream is stopped.\n     */\n    stop = async () => {\n        await this.write(\"uart\", \"tx\", this.commands.STOP_WEIGHT_MEAS, 0);\n    };\n    /**\n     * Starts streaming data from the specified device.\n     * @param {number} [duration=0] - The duration of the stream in milliseconds. If set to 0, stream will continue indefinitely.\n     * @returns {Promise<void>} A promise that resolves when the streaming operation is completed.\n     */\n    stream = async (duration = 0) => {\n        // Reset download packets\n        this.downloadPackets.length = 0;\n        // Read calibration data if not already available\n        if (!this.calibrationData[0].length) {\n            await this.calibration();\n        }\n        // Start streaming data\n        await this.write(\"uart\", \"tx\", this.commands.START_WEIGHT_MEAS, duration);\n        // Stop streaming if duration is set\n        if (duration !== 0) {\n            await this.stop();\n        }\n    };\n    /**\n     * Retrieves the entire 320 bytes of non-volatile memory from the device.\n     *\n     * The memory consists of 10 segments, each 32 bytes long. If any segment was previously written,\n     * the corresponding data will appear in the response. Unused portions of the memory are\n     * padded with whitespace.\n     *\n     * @returns {Promise<string>} A Promise that resolves with the 320-byte memory content as a string,\n     */\n    text = async () => {\n        let response = undefined;\n        await this.write(\"uart\", \"tx\", this.commands.GET_TEXT, 250, (data) => {\n            response = data;\n        });\n        return response;\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a Smartboard Climbing mySmartBoard device.\n * TODO: Add services, do you own a mySmartBoard? Help us!\n * {@link https://www.smartboard-climbing.com}\n */\nexport class mySmartBoard extends Device {\n    constructor() {\n        super({\n            filters: [{ name: \"mySmartBoard\" }],\n            services: [],\n        });\n    }\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Progressor responses\n */\nvar ProgressorResponses;\n(function (ProgressorResponses) {\n    /**\n     * Response received after sending a command to the device.\n     * This could include acknowledgment or specific data related to the command sent.\n     */\n    ProgressorResponses[ProgressorResponses[\"COMMAND_RESPONSE\"] = 0] = \"COMMAND_RESPONSE\";\n    /**\n     * Data representing a weight measurement from the device.\n     * Typically used for tracking load or force applied.\n     */\n    ProgressorResponses[ProgressorResponses[\"WEIGHT_MEASURE\"] = 1] = \"WEIGHT_MEASURE\";\n    /**\n     * Peak rate of force development (RFD) measurement.\n     * This measures how quickly the force is applied over time.\n     */\n    ProgressorResponses[ProgressorResponses[\"PEAK_RFD_MEAS\"] = 2] = \"PEAK_RFD_MEAS\";\n    /**\n     * Series of peak rate of force development (RFD) measurements.\n     * This could be used for analyzing force trends over multiple data points.\n     */\n    ProgressorResponses[ProgressorResponses[\"PEAK_RFD_MEAS_SERIES\"] = 3] = \"PEAK_RFD_MEAS_SERIES\";\n    /**\n     * Low battery warning from the device.\n     * Indicates that the battery level is below a critical threshold.\n     */\n    ProgressorResponses[ProgressorResponses[\"LOW_BATTERY_WARNING\"] = 4] = \"LOW_BATTERY_WARNING\";\n})(ProgressorResponses || (ProgressorResponses = {}));\n/**\n * Represents a Tindeq Progressor device.\n * {@link https://tindeq.com}\n */\nexport class Progressor extends Device {\n    constructor() {\n        super({\n            filters: [{ namePrefix: \"Progressor\" }],\n            services: [\n                {\n                    name: \"Progressor Service\",\n                    id: \"progressor\",\n                    uuid: \"7e4e1701-1ea6-40c9-9dcc-13d34ffead57\",\n                    characteristics: [\n                        {\n                            name: \"Notify\",\n                            id: \"rx\",\n                            uuid: \"7e4e1702-1ea6-40c9-9dcc-13d34ffead57\",\n                        },\n                        {\n                            name: \"Write\",\n                            id: \"tx\",\n                            uuid: \"7e4e1703-1ea6-40c9-9dcc-13d34ffead57\",\n                        },\n                    ],\n                },\n                {\n                    name: \"Nordic Device Firmware Update (DFU) Service\",\n                    id: \"dfu\",\n                    uuid: \"0000fe59-0000-1000-8000-00805f9b34fb\",\n                    characteristics: [\n                        {\n                            name: \"Buttonless DFU\",\n                            id: \"dfu\",\n                            uuid: \"8ec90003-f315-4f60-9fb8-838830daea50\",\n                        },\n                    ],\n                },\n            ],\n            commands: {\n                TARE_SCALE: \"d\", // 0x64\n                START_WEIGHT_MEAS: \"e\", // 0x65\n                STOP_WEIGHT_MEAS: \"f\", // 0x66\n                START_PEAK_RFD_MEAS: \"g\", //  0x67\n                START_PEAK_RFD_MEAS_SERIES: \"h\", //  0x68\n                ADD_CALIB_POINT: \"i\", //  0x69\n                SAVE_CALIB: \"j\", //  0x6a\n                GET_FW_VERSION: \"k\", //  0x6b\n                GET_ERR_INFO: \"l\", //  0x6c\n                CLR_ERR_INFO: \"m\", //  0x6d\n                SLEEP: \"n\", // 0x6e\n                GET_BATT_VLTG: \"o\", //  0x6f\n            },\n        });\n    }\n    /**\n     * Retrieves battery or voltage information from the device.\n     * @returns {Promise<string | undefined>} A Promise that resolves with the battery or voltage information,\n     */\n    battery = async () => {\n        let response = undefined;\n        await this.write(\"progressor\", \"tx\", this.commands.GET_BATT_VLTG, 250, (data) => {\n            response = data;\n        });\n        return response;\n    };\n    /**\n     * Retrieves firmware version from the device.\n     * @returns {Promise<string>} A Promise that resolves with the firmware version,\n     */\n    firmware = async () => {\n        let response = undefined;\n        await this.write(\"progressor\", \"tx\", this.commands.GET_FW_VERSION, 250, (data) => {\n            response = data;\n        });\n        return response;\n    };\n    /**\n     * Handles data received from the device, processes weight measurements,\n     * and updates mass data including maximum and average values.\n     * It also handles command responses for retrieving device information.\n     *\n     * @param {BluetoothRemoteGATTCharacteristic} characteristic - The notification event.\n     */\n    handleNotifications = (characteristic) => {\n        const value = characteristic.value;\n        if (value) {\n            // Update timestamp\n            this.updateTimestamp();\n            if (value.buffer) {\n                const receivedTime = Date.now();\n                // Read the first byte of the buffer to determine the kind of message\n                const kind = value.getInt8(0);\n                // Check if the message is a weight measurement\n                if (kind === ProgressorResponses.WEIGHT_MEASURE) {\n                    // Start parsing data from the 3rd byte (index 2)\n                    let offset = 2;\n                    // Continue parsing while there's data left in the buffer\n                    while (offset < value.byteLength) {\n                        // Read a 32-bit float (4 bytes) for the weight, using little-endian\n                        const weight = value.getFloat32(offset, true);\n                        // Move the offset by 4 bytes\n                        offset += 4;\n                        // Read a 32-bit integer (4 bytes) for the seconds, using little-endian\n                        const seconds = value.getInt32(offset, true);\n                        // Move the offset by 4 bytes\n                        offset += 4;\n                        // Check if both weight and seconds are valid numbers\n                        if (!isNaN(weight) && !isNaN(seconds)) {\n                            // Tare correction\n                            const numericData = weight - this.applyTare(weight);\n                            // Add data to downloadable Array\n                            this.downloadPackets.push({\n                                received: receivedTime,\n                                sampleNum: seconds,\n                                battRaw: 0,\n                                samples: [weight],\n                                masses: [numericData],\n                            });\n                            // Check for max weight\n                            this.massMax = Math.max(Number(this.massMax), Number(numericData)).toFixed(1);\n                            // Update running sum and count\n                            const currentMassTotal = Math.max(-1000, Number(numericData));\n                            this.massTotalSum += currentMassTotal;\n                            this.dataPointCount++;\n                            // Calculate the average dynamically\n                            this.massAverage = (this.massTotalSum / this.dataPointCount).toFixed(1);\n                            // Check if device is being used\n                            this.activityCheck(numericData);\n                            this.notifyCallback({\n                                massMax: this.massMax,\n                                massAverage: this.massAverage,\n                                massTotal: Math.max(-1000, numericData).toFixed(1),\n                            });\n                        }\n                    }\n                }\n                else if (kind === ProgressorResponses.COMMAND_RESPONSE) {\n                    if (!this.writeLast)\n                        return;\n                    let output = \"\";\n                    if (this.writeLast === this.commands.GET_BATT_VLTG) {\n                        output = new DataView(value.buffer, 2).getUint32(0, true).toString();\n                    }\n                    else if (this.writeLast === this.commands.GET_FW_VERSION) {\n                        output = new TextDecoder().decode(new Uint8Array(value.buffer).slice(2));\n                    }\n                    else if (this.writeLast === this.commands.GET_ERR_INFO) {\n                        output = new TextDecoder().decode(new Uint8Array(value.buffer.slice(2)));\n                    }\n                    this.writeCallback(output);\n                }\n                else if (kind === ProgressorResponses.LOW_BATTERY_WARNING) {\n                    console.warn(\"⚠️ Low power detected. Please consider connecting to a power source.\");\n                }\n                else {\n                    throw new Error(`Unknown message kind detected: ${kind}`);\n                }\n            }\n        }\n    };\n    /**\n     * Stops the data stream on the specified device.\n     * @returns {Promise<void>} A promise that resolves when the stream is stopped.\n     */\n    stop = async () => {\n        await this.write(\"progressor\", \"tx\", this.commands.STOP_WEIGHT_MEAS, 0);\n    };\n    /**\n     * Starts streaming data from the specified device.\n     * @param {number} [duration=0] - The duration of the stream in milliseconds. If set to 0, stream will continue indefinitely.\n     * @returns {Promise<void>} A promise that resolves when the streaming operation is completed.\n     */\n    stream = async (duration = 0) => {\n        // Reset download packets\n        this.downloadPackets.length = 0;\n        // Start streaming data\n        await this.write(\"progressor\", \"tx\", this.commands.START_WEIGHT_MEAS, duration);\n        // Stop streaming if duration is set\n        if (duration !== 0) {\n            await this.stop();\n        }\n    };\n}\n", "import { Device } from \"../device.model.js\";\n/**\n * Represents a Weiheng - WH-C06 (or MAT Muscle Meter) device.\n * To use this device enable: `chrome://flags/#enable-experimental-web-platform-features`.\n * {@link https://googlechrome.github.io/samples/web-bluetooth/scan.html| Web Bluetooth}\n * {@link https://weihengmanufacturer.com}\n */\nexport class WHC06 extends Device {\n    /**\n     * Offset for the byte location in the manufacturer data to extract the weight.\n     * @type {number}\n     * @static\n     * @readonly\n     * @constant\n     */\n    static weightOffset = 10;\n    /**\n     * Company identifier for WH-C06, also used by 'TomTom International BV': https://www.bluetooth.com/specifications/assigned-numbers/\n     * @type {number}\n     * @static\n     * @readonly\n     * @constant\n     */\n    static manufacturerId = 256;\n    /**\n     * To track disconnection timeout.\n     * @type {number|null}\n     * @private\n     */\n    advertisementTimeout = null;\n    /**\n     * The limit in seconds when timeout is triggered\n     * @type {number}\n     * @private\n     * @readonly\n     */\n    advertisementTimeoutTime = 10;\n    // /**\n    //  * Offset for the byte location in the manufacturer data to determine weight stability.\n    //  * @type {number}\n    //  * @static\n    //  * @readonly\n    //  * @constant\n    //  */\n    // private static readonly stableOffset: number = 14\n    constructor() {\n        super({\n            filters: [\n                {\n                    // namePrefix: \"IF_B7\",\n                    manufacturerData: [\n                        {\n                            companyIdentifier: 0x0100, // 256\n                        },\n                    ],\n                },\n            ],\n            services: [],\n        });\n    }\n    /**\n     * Connects to a Bluetooth device.\n     * @param {Function} [onSuccess] - Optional callback function to execute on successful connection. Default logs success.\n     * @param {Function} [onError] - Optional callback function to execute on error. Default logs the error.\n     */\n    connect = async (onSuccess = () => console.log(\"Connected successfully\"), onError = (error) => console.error(error)) => {\n        try {\n            // Only data matching the optionalManufacturerData parameter to requestDevice is included in the advertisement event: https://github.com/WebBluetoothCG/web-bluetooth/issues/598\n            const optionalManufacturerData = this.filters.flatMap((filter) => filter.manufacturerData?.map((data) => data.companyIdentifier) || []);\n            const bluetooth = await this.getBluetooth();\n            this.bluetooth = await bluetooth.requestDevice({\n                filters: this.filters,\n                optionalManufacturerData,\n            });\n            if (!this.bluetooth.gatt) {\n                throw new Error(\"GATT is not available on this device\");\n            }\n            // Update timestamp\n            this.updateTimestamp();\n            // Device has no services / characteristics, so we directly call onSuccess\n            onSuccess();\n            this.bluetooth.addEventListener(\"advertisementreceived\", (event) => {\n                const data = event.manufacturerData.get(WHC06.manufacturerId);\n                if (data) {\n                    // Handle recieved data\n                    const weight = (data.getUint8(WHC06.weightOffset) << 8) | data.getUint8(WHC06.weightOffset + 1);\n                    // const stable = (data.getUint8(STABLE_OFFSET) & 0xf0) >> 4\n                    // const unit = data.getUint8(STABLE_OFFSET) & 0x0f\n                    const receivedTime = Date.now();\n                    const receivedData = weight / 100;\n                    // Tare correction\n                    // 0.20kg - 0.20kg = 0kg\n                    // 0.40kg - 0.20kg = 0.20kg\n                    const numericData = receivedData - this.applyTare(receivedData) * -1;\n                    // what i want (if tare is available)\n                    // 75kg - 75kg = 0\n                    // 50kg - 75kg = -25kg * -1 = 25kg\n                    // Add data to downloadable Array\n                    this.downloadPackets.push({\n                        received: receivedTime,\n                        sampleNum: this.dataPointCount,\n                        battRaw: 0,\n                        samples: [numericData],\n                        masses: [numericData],\n                    });\n                    // Update massMax\n                    this.massMax = Math.max(Number(this.massMax), numericData).toFixed(1);\n                    // Update running sum and count\n                    const currentMassTotal = Math.max(-1000, numericData);\n                    this.massTotalSum += currentMassTotal;\n                    this.dataPointCount++;\n                    // Calculate the average dynamically\n                    this.massAverage = (this.massTotalSum / this.dataPointCount).toFixed(1);\n                    // Check if device is being used\n                    this.activityCheck(numericData);\n                    // Notify with weight data\n                    this.notifyCallback({\n                        massMax: this.massMax,\n                        massAverage: this.massAverage,\n                        massTotal: Math.max(-1000, numericData).toFixed(1),\n                    });\n                }\n                // Reset \"still advertising\" counter\n                this.resetAdvertisementTimeout();\n            });\n            // When the companyIdentifier is provided we want to get manufacturerData using watchAdvertisements.\n            if (optionalManufacturerData.length) {\n                // Receive events when the system receives an advertisement packet from a watched device.\n                // To use this function in Chrome: chrome://flags/#enable-experimental-web-platform-features has to be enabled.\n                // More info: https://chromestatus.com/feature/5180688812736512\n                if (typeof this.bluetooth.watchAdvertisements === \"function\") {\n                    await this.bluetooth.watchAdvertisements();\n                }\n                else {\n                    throw new Error(\"watchAdvertisements isn't supported. For Chrome, enable it at chrome://flags/#enable-experimental-web-platform-features.\");\n                }\n            }\n        }\n        catch (error) {\n            onError(error);\n        }\n    };\n    /**\n     * Custom check if a Bluetooth device is connected.\n     * For the WH-C06 device, the `gatt.connected` property remains `false` even after the device is connected.\n     * @returns {boolean} A boolean indicating whether the device is connected.\n     */\n    isConnected = () => {\n        return !!this.bluetooth;\n    };\n    /**\n     * Resets the timeout that checks if the device is still advertising.\n     */\n    resetAdvertisementTimeout = () => {\n        // Clear the previous timeout\n        if (this.advertisementTimeout) {\n            clearTimeout(this.advertisementTimeout);\n        }\n        // Set a new timeout to stop tracking if no advertisement is received\n        this.advertisementTimeout = globalThis.setTimeout(() => {\n            // Mimic a disconnect\n            const disconnectedEvent = new Event(\"gattserverdisconnected\");\n            Object.defineProperty(disconnectedEvent, \"target\", {\n                value: this.bluetooth,\n                writable: false,\n            });\n            // Print error to the console\n            console.error(`No advertisement received for ${this.advertisementTimeoutTime} seconds, stopping tracking..`);\n            this.onDisconnected(disconnectedEvent);\n        }, this.advertisementTimeoutTime * 1000); // 10 seconds\n    };\n}\n"],
  "mappings": "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",
  "names": ["sample", "KilterBoardPacket", "ProgressorResponses"]
}
