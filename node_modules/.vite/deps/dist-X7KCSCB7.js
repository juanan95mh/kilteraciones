import {
  __commonJS,
  __require
} from "./chunk-KVCYZR2Q.js";

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/webbluetooth/dist/uuid.js
var require_uuid = __commonJS({
  "node_modules/webbluetooth/dist/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothUUID = void 0;
    var bluetoothServices;
    (function(bluetoothServices2) {
      bluetoothServices2[bluetoothServices2["alert_notification"] = 6161] = "alert_notification";
      bluetoothServices2[bluetoothServices2["automation_io"] = 6165] = "automation_io";
      bluetoothServices2[bluetoothServices2["battery_service"] = 6159] = "battery_service";
      bluetoothServices2[bluetoothServices2["blood_pressure"] = 6160] = "blood_pressure";
      bluetoothServices2[bluetoothServices2["body_composition"] = 6171] = "body_composition";
      bluetoothServices2[bluetoothServices2["bond_management"] = 6174] = "bond_management";
      bluetoothServices2[bluetoothServices2["continuous_glucose_monitoring"] = 6175] = "continuous_glucose_monitoring";
      bluetoothServices2[bluetoothServices2["current_time"] = 6149] = "current_time";
      bluetoothServices2[bluetoothServices2["cycling_power"] = 6168] = "cycling_power";
      bluetoothServices2[bluetoothServices2["cycling_speed_and_cadence"] = 6166] = "cycling_speed_and_cadence";
      bluetoothServices2[bluetoothServices2["device_information"] = 6154] = "device_information";
      bluetoothServices2[bluetoothServices2["environmental_sensing"] = 6170] = "environmental_sensing";
      bluetoothServices2[bluetoothServices2["generic_access"] = 6144] = "generic_access";
      bluetoothServices2[bluetoothServices2["generic_attribute"] = 6145] = "generic_attribute";
      bluetoothServices2[bluetoothServices2["glucose"] = 6152] = "glucose";
      bluetoothServices2[bluetoothServices2["health_thermometer"] = 6153] = "health_thermometer";
      bluetoothServices2[bluetoothServices2["heart_rate"] = 6157] = "heart_rate";
      bluetoothServices2[bluetoothServices2["human_interface_device"] = 6162] = "human_interface_device";
      bluetoothServices2[bluetoothServices2["immediate_alert"] = 6146] = "immediate_alert";
      bluetoothServices2[bluetoothServices2["indoor_positioning"] = 6177] = "indoor_positioning";
      bluetoothServices2[bluetoothServices2["internet_protocol_support"] = 6176] = "internet_protocol_support";
      bluetoothServices2[bluetoothServices2["link_loss"] = 6147] = "link_loss";
      bluetoothServices2[bluetoothServices2["location_and_navigation"] = 6169] = "location_and_navigation";
      bluetoothServices2[bluetoothServices2["next_dst_change"] = 6151] = "next_dst_change";
      bluetoothServices2[bluetoothServices2["phone_alert_status"] = 6158] = "phone_alert_status";
      bluetoothServices2[bluetoothServices2["pulse_oximeter"] = 6178] = "pulse_oximeter";
      bluetoothServices2[bluetoothServices2["reference_time_update"] = 6150] = "reference_time_update";
      bluetoothServices2[bluetoothServices2["running_speed_and_cadence"] = 6164] = "running_speed_and_cadence";
      bluetoothServices2[bluetoothServices2["scan_parameters"] = 6163] = "scan_parameters";
      bluetoothServices2[bluetoothServices2["tx_power"] = 6148] = "tx_power";
      bluetoothServices2[bluetoothServices2["user_data"] = 6172] = "user_data";
      bluetoothServices2[bluetoothServices2["weight_scale"] = 6173] = "weight_scale";
    })(bluetoothServices || (bluetoothServices = {}));
    var bluetoothCharacteristics;
    (function(bluetoothCharacteristics2) {
      bluetoothCharacteristics2[bluetoothCharacteristics2["aerobic_heart_rate_lower_limit"] = 10878] = "aerobic_heart_rate_lower_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["aerobic_heart_rate_upper_limit"] = 10884] = "aerobic_heart_rate_upper_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["aerobic_threshold"] = 10879] = "aerobic_threshold";
      bluetoothCharacteristics2[bluetoothCharacteristics2["age"] = 10880] = "age";
      bluetoothCharacteristics2[bluetoothCharacteristics2["aggregate"] = 10842] = "aggregate";
      bluetoothCharacteristics2[bluetoothCharacteristics2["alert_category_id"] = 10819] = "alert_category_id";
      bluetoothCharacteristics2[bluetoothCharacteristics2["alert_category_id_bit_mask"] = 10818] = "alert_category_id_bit_mask";
      bluetoothCharacteristics2[bluetoothCharacteristics2["alert_level"] = 10758] = "alert_level";
      bluetoothCharacteristics2[bluetoothCharacteristics2["alert_notification_control_point"] = 10820] = "alert_notification_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["alert_status"] = 10815] = "alert_status";
      bluetoothCharacteristics2[bluetoothCharacteristics2["altitude"] = 10931] = "altitude";
      bluetoothCharacteristics2[bluetoothCharacteristics2["anaerobic_heart_rate_lower_limit"] = 10881] = "anaerobic_heart_rate_lower_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["anaerobic_heart_rate_upper_limit"] = 10882] = "anaerobic_heart_rate_upper_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["anaerobic_threshold"] = 10883] = "anaerobic_threshold";
      bluetoothCharacteristics2[bluetoothCharacteristics2["analog"] = 10840] = "analog";
      bluetoothCharacteristics2[bluetoothCharacteristics2["apparent_wind_direction"] = 10867] = "apparent_wind_direction";
      bluetoothCharacteristics2[bluetoothCharacteristics2["apparent_wind_speed"] = 10866] = "apparent_wind_speed";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.appearance"] = 10753] = "gap.appearance";
      bluetoothCharacteristics2[bluetoothCharacteristics2["barometric_pressure_trend"] = 10915] = "barometric_pressure_trend";
      bluetoothCharacteristics2[bluetoothCharacteristics2["battery_level"] = 10777] = "battery_level";
      bluetoothCharacteristics2[bluetoothCharacteristics2["blood_pressure_feature"] = 10825] = "blood_pressure_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["blood_pressure_measurement"] = 10805] = "blood_pressure_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["body_composition_feature"] = 10907] = "body_composition_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["body_composition_measurement"] = 10908] = "body_composition_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["body_sensor_location"] = 10808] = "body_sensor_location";
      bluetoothCharacteristics2[bluetoothCharacteristics2["bond_management_control_point"] = 10916] = "bond_management_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["bond_management_feature"] = 10917] = "bond_management_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["boot_keyboard_input_report"] = 10786] = "boot_keyboard_input_report";
      bluetoothCharacteristics2[bluetoothCharacteristics2["boot_keyboard_output_report"] = 10802] = "boot_keyboard_output_report";
      bluetoothCharacteristics2[bluetoothCharacteristics2["boot_mouse_input_report"] = 10803] = "boot_mouse_input_report";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.central_address_resolution_support"] = 10918] = "gap.central_address_resolution_support";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_feature"] = 10920] = "cgm_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_measurement"] = 10919] = "cgm_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_session_run_time"] = 10923] = "cgm_session_run_time";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_session_start_time"] = 10922] = "cgm_session_start_time";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_specific_ops_control_point"] = 10924] = "cgm_specific_ops_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cgm_status"] = 10921] = "cgm_status";
      bluetoothCharacteristics2[bluetoothCharacteristics2["csc_feature"] = 10844] = "csc_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["csc_measurement"] = 10843] = "csc_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["current_time"] = 10795] = "current_time";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cycling_power_control_point"] = 10854] = "cycling_power_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cycling_power_feature"] = 10853] = "cycling_power_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cycling_power_measurement"] = 10851] = "cycling_power_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["cycling_power_vector"] = 10852] = "cycling_power_vector";
      bluetoothCharacteristics2[bluetoothCharacteristics2["database_change_increment"] = 10905] = "database_change_increment";
      bluetoothCharacteristics2[bluetoothCharacteristics2["date_of_birth"] = 10885] = "date_of_birth";
      bluetoothCharacteristics2[bluetoothCharacteristics2["date_of_threshold_assessment"] = 10886] = "date_of_threshold_assessment";
      bluetoothCharacteristics2[bluetoothCharacteristics2["date_time"] = 10760] = "date_time";
      bluetoothCharacteristics2[bluetoothCharacteristics2["day_date_time"] = 10762] = "day_date_time";
      bluetoothCharacteristics2[bluetoothCharacteristics2["day_of_week"] = 10761] = "day_of_week";
      bluetoothCharacteristics2[bluetoothCharacteristics2["descriptor_value_changed"] = 10877] = "descriptor_value_changed";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.device_name"] = 10752] = "gap.device_name";
      bluetoothCharacteristics2[bluetoothCharacteristics2["dew_point"] = 10875] = "dew_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["digital"] = 10838] = "digital";
      bluetoothCharacteristics2[bluetoothCharacteristics2["dst_offset"] = 10765] = "dst_offset";
      bluetoothCharacteristics2[bluetoothCharacteristics2["elevation"] = 10860] = "elevation";
      bluetoothCharacteristics2[bluetoothCharacteristics2["email_address"] = 10887] = "email_address";
      bluetoothCharacteristics2[bluetoothCharacteristics2["exact_time_256"] = 10764] = "exact_time_256";
      bluetoothCharacteristics2[bluetoothCharacteristics2["fat_burn_heart_rate_lower_limit"] = 10888] = "fat_burn_heart_rate_lower_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["fat_burn_heart_rate_upper_limit"] = 10889] = "fat_burn_heart_rate_upper_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["firmware_revision_string"] = 10790] = "firmware_revision_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["first_name"] = 10890] = "first_name";
      bluetoothCharacteristics2[bluetoothCharacteristics2["five_zone_heart_rate_limits"] = 10891] = "five_zone_heart_rate_limits";
      bluetoothCharacteristics2[bluetoothCharacteristics2["floor_number"] = 10930] = "floor_number";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gender"] = 10892] = "gender";
      bluetoothCharacteristics2[bluetoothCharacteristics2["glucose_feature"] = 10833] = "glucose_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["glucose_measurement"] = 10776] = "glucose_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["glucose_measurement_context"] = 10804] = "glucose_measurement_context";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gust_factor"] = 10868] = "gust_factor";
      bluetoothCharacteristics2[bluetoothCharacteristics2["hardware_revision_string"] = 10791] = "hardware_revision_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["heart_rate_control_point"] = 10809] = "heart_rate_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["heart_rate_max"] = 10893] = "heart_rate_max";
      bluetoothCharacteristics2[bluetoothCharacteristics2["heart_rate_measurement"] = 10807] = "heart_rate_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["heat_index"] = 10874] = "heat_index";
      bluetoothCharacteristics2[bluetoothCharacteristics2["height"] = 10894] = "height";
      bluetoothCharacteristics2[bluetoothCharacteristics2["hid_control_point"] = 10828] = "hid_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["hid_information"] = 10826] = "hid_information";
      bluetoothCharacteristics2[bluetoothCharacteristics2["hip_circumference"] = 10895] = "hip_circumference";
      bluetoothCharacteristics2[bluetoothCharacteristics2["humidity"] = 10863] = "humidity";
      bluetoothCharacteristics2[bluetoothCharacteristics2["ieee_11073-20601_regulatory_certification_data_list"] = 10794] = "ieee_11073-20601_regulatory_certification_data_list";
      bluetoothCharacteristics2[bluetoothCharacteristics2["indoor_positioning_configuration"] = 10925] = "indoor_positioning_configuration";
      bluetoothCharacteristics2[bluetoothCharacteristics2["intermediate_blood_pressure"] = 10806] = "intermediate_blood_pressure";
      bluetoothCharacteristics2[bluetoothCharacteristics2["intermediate_temperature"] = 10782] = "intermediate_temperature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["irradiance"] = 10871] = "irradiance";
      bluetoothCharacteristics2[bluetoothCharacteristics2["language"] = 10914] = "language";
      bluetoothCharacteristics2[bluetoothCharacteristics2["last_name"] = 10896] = "last_name";
      bluetoothCharacteristics2[bluetoothCharacteristics2["latitude"] = 10926] = "latitude";
      bluetoothCharacteristics2[bluetoothCharacteristics2["ln_control_point"] = 10859] = "ln_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["ln_feature"] = 10858] = "ln_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["local_east_coordinate.xml"] = 10929] = "local_east_coordinate.xml";
      bluetoothCharacteristics2[bluetoothCharacteristics2["local_north_coordinate"] = 10928] = "local_north_coordinate";
      bluetoothCharacteristics2[bluetoothCharacteristics2["local_time_information"] = 10767] = "local_time_information";
      bluetoothCharacteristics2[bluetoothCharacteristics2["location_and_speed"] = 10855] = "location_and_speed";
      bluetoothCharacteristics2[bluetoothCharacteristics2["location_name"] = 10933] = "location_name";
      bluetoothCharacteristics2[bluetoothCharacteristics2["longitude"] = 10927] = "longitude";
      bluetoothCharacteristics2[bluetoothCharacteristics2["magnetic_declination"] = 10796] = "magnetic_declination";
      bluetoothCharacteristics2[bluetoothCharacteristics2["magnetic_flux_density_2D"] = 10912] = "magnetic_flux_density_2D";
      bluetoothCharacteristics2[bluetoothCharacteristics2["magnetic_flux_density_3D"] = 10913] = "magnetic_flux_density_3D";
      bluetoothCharacteristics2[bluetoothCharacteristics2["manufacturer_name_string"] = 10793] = "manufacturer_name_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["maximum_recommended_heart_rate"] = 10897] = "maximum_recommended_heart_rate";
      bluetoothCharacteristics2[bluetoothCharacteristics2["measurement_interval"] = 10785] = "measurement_interval";
      bluetoothCharacteristics2[bluetoothCharacteristics2["model_number_string"] = 10788] = "model_number_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["navigation"] = 10856] = "navigation";
      bluetoothCharacteristics2[bluetoothCharacteristics2["new_alert"] = 10822] = "new_alert";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.peripheral_preferred_connection_parameters"] = 10756] = "gap.peripheral_preferred_connection_parameters";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.peripheral_privacy_flag"] = 10754] = "gap.peripheral_privacy_flag";
      bluetoothCharacteristics2[bluetoothCharacteristics2["plx_continuous_measurement"] = 10847] = "plx_continuous_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["plx_features"] = 10848] = "plx_features";
      bluetoothCharacteristics2[bluetoothCharacteristics2["plx_spot_check_measurement"] = 10846] = "plx_spot_check_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["pnp_id"] = 10832] = "pnp_id";
      bluetoothCharacteristics2[bluetoothCharacteristics2["pollen_concentration"] = 10869] = "pollen_concentration";
      bluetoothCharacteristics2[bluetoothCharacteristics2["position_quality"] = 10857] = "position_quality";
      bluetoothCharacteristics2[bluetoothCharacteristics2["pressure"] = 10861] = "pressure";
      bluetoothCharacteristics2[bluetoothCharacteristics2["protocol_mode"] = 10830] = "protocol_mode";
      bluetoothCharacteristics2[bluetoothCharacteristics2["rainfall"] = 10872] = "rainfall";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gap.reconnection_address"] = 10755] = "gap.reconnection_address";
      bluetoothCharacteristics2[bluetoothCharacteristics2["record_access_control_point"] = 10834] = "record_access_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["reference_time_information"] = 10772] = "reference_time_information";
      bluetoothCharacteristics2[bluetoothCharacteristics2["report"] = 10829] = "report";
      bluetoothCharacteristics2[bluetoothCharacteristics2["report_map"] = 10827] = "report_map";
      bluetoothCharacteristics2[bluetoothCharacteristics2["resting_heart_rate"] = 10898] = "resting_heart_rate";
      bluetoothCharacteristics2[bluetoothCharacteristics2["ringer_control_point"] = 10816] = "ringer_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["ringer_setting"] = 10817] = "ringer_setting";
      bluetoothCharacteristics2[bluetoothCharacteristics2["rsc_feature"] = 10836] = "rsc_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["rsc_measurement"] = 10835] = "rsc_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["sc_control_point"] = 10837] = "sc_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["scan_interval_window"] = 10831] = "scan_interval_window";
      bluetoothCharacteristics2[bluetoothCharacteristics2["scan_refresh"] = 10801] = "scan_refresh";
      bluetoothCharacteristics2[bluetoothCharacteristics2["sensor_location"] = 10845] = "sensor_location";
      bluetoothCharacteristics2[bluetoothCharacteristics2["serial_number_string"] = 10789] = "serial_number_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["gatt.service_changed"] = 10757] = "gatt.service_changed";
      bluetoothCharacteristics2[bluetoothCharacteristics2["software_revision_string"] = 10792] = "software_revision_string";
      bluetoothCharacteristics2[bluetoothCharacteristics2["sport_type_for_aerobic_and_anaerobic_thresholds"] = 10899] = "sport_type_for_aerobic_and_anaerobic_thresholds";
      bluetoothCharacteristics2[bluetoothCharacteristics2["supported_new_alert_category"] = 10823] = "supported_new_alert_category";
      bluetoothCharacteristics2[bluetoothCharacteristics2["supported_unread_alert_category"] = 10824] = "supported_unread_alert_category";
      bluetoothCharacteristics2[bluetoothCharacteristics2["system_id"] = 10787] = "system_id";
      bluetoothCharacteristics2[bluetoothCharacteristics2["temperature"] = 10862] = "temperature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["temperature_measurement"] = 10780] = "temperature_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["temperature_type"] = 10781] = "temperature_type";
      bluetoothCharacteristics2[bluetoothCharacteristics2["three_zone_heart_rate_limits"] = 10900] = "three_zone_heart_rate_limits";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_accuracy"] = 10770] = "time_accuracy";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_source"] = 10771] = "time_source";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_update_control_point"] = 10774] = "time_update_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_update_state"] = 10775] = "time_update_state";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_with_dst"] = 10769] = "time_with_dst";
      bluetoothCharacteristics2[bluetoothCharacteristics2["time_zone"] = 10766] = "time_zone";
      bluetoothCharacteristics2[bluetoothCharacteristics2["true_wind_direction"] = 10865] = "true_wind_direction";
      bluetoothCharacteristics2[bluetoothCharacteristics2["true_wind_speed"] = 10864] = "true_wind_speed";
      bluetoothCharacteristics2[bluetoothCharacteristics2["two_zone_heart_rate_limit"] = 10901] = "two_zone_heart_rate_limit";
      bluetoothCharacteristics2[bluetoothCharacteristics2["tx_power_level"] = 10759] = "tx_power_level";
      bluetoothCharacteristics2[bluetoothCharacteristics2["uncertainty"] = 10932] = "uncertainty";
      bluetoothCharacteristics2[bluetoothCharacteristics2["unread_alert_status"] = 10821] = "unread_alert_status";
      bluetoothCharacteristics2[bluetoothCharacteristics2["user_control_point"] = 10911] = "user_control_point";
      bluetoothCharacteristics2[bluetoothCharacteristics2["user_index"] = 10906] = "user_index";
      bluetoothCharacteristics2[bluetoothCharacteristics2["uv_index"] = 10870] = "uv_index";
      bluetoothCharacteristics2[bluetoothCharacteristics2["vo2_max"] = 10902] = "vo2_max";
      bluetoothCharacteristics2[bluetoothCharacteristics2["waist_circumference"] = 10903] = "waist_circumference";
      bluetoothCharacteristics2[bluetoothCharacteristics2["weight"] = 10904] = "weight";
      bluetoothCharacteristics2[bluetoothCharacteristics2["weight_measurement"] = 10909] = "weight_measurement";
      bluetoothCharacteristics2[bluetoothCharacteristics2["weight_scale_feature"] = 10910] = "weight_scale_feature";
      bluetoothCharacteristics2[bluetoothCharacteristics2["wind_chill"] = 10873] = "wind_chill";
    })(bluetoothCharacteristics || (bluetoothCharacteristics = {}));
    var bluetoothDescriptors;
    (function(bluetoothDescriptors2) {
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.characteristic_extended_properties"] = 10496] = "gatt.characteristic_extended_properties";
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.characteristic_user_description"] = 10497] = "gatt.characteristic_user_description";
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.client_characteristic_configuration"] = 10498] = "gatt.client_characteristic_configuration";
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.server_characteristic_configuration"] = 10499] = "gatt.server_characteristic_configuration";
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.characteristic_presentation_format"] = 10500] = "gatt.characteristic_presentation_format";
      bluetoothDescriptors2[bluetoothDescriptors2["gatt.characteristic_aggregate_format"] = 10501] = "gatt.characteristic_aggregate_format";
      bluetoothDescriptors2[bluetoothDescriptors2["valid_range"] = 10502] = "valid_range";
      bluetoothDescriptors2[bluetoothDescriptors2["external_report_reference"] = 10503] = "external_report_reference";
      bluetoothDescriptors2[bluetoothDescriptors2["report_reference"] = 10504] = "report_reference";
      bluetoothDescriptors2[bluetoothDescriptors2["number_of_digitals"] = 10505] = "number_of_digitals";
      bluetoothDescriptors2[bluetoothDescriptors2["value_trigger_setting"] = 10506] = "value_trigger_setting";
      bluetoothDescriptors2[bluetoothDescriptors2["es_configuration"] = 10507] = "es_configuration";
      bluetoothDescriptors2[bluetoothDescriptors2["es_measurement"] = 10508] = "es_measurement";
      bluetoothDescriptors2[bluetoothDescriptors2["es_trigger_setting"] = 10509] = "es_trigger_setting";
      bluetoothDescriptors2[bluetoothDescriptors2["time_trigger_setting"] = 10510] = "time_trigger_setting";
    })(bluetoothDescriptors || (bluetoothDescriptors = {}));
    var canonicalUUID = function(alias) {
      if (typeof alias === "number")
        alias = alias.toString(16);
      alias = alias.toLowerCase();
      if (alias.length <= 8)
        alias = ("00000000" + alias).slice(-8) + "-0000-1000-8000-00805f9b34fb";
      if (alias.length === 32)
        alias = alias.match(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/).splice(1).join("-");
      return alias;
    };
    var getService = function(name) {
      if (typeof name === "string" && bluetoothServices[name]) {
        name = bluetoothServices[name];
      }
      return canonicalUUID(name);
    };
    var getCharacteristic = function(name) {
      if (typeof name === "string" && bluetoothCharacteristics[name]) {
        name = bluetoothCharacteristics[name];
      }
      return canonicalUUID(name);
    };
    var getDescriptor = function(name) {
      if (typeof name === "string" && bluetoothDescriptors[name]) {
        name = bluetoothDescriptors[name];
      }
      return canonicalUUID(name);
    };
    exports.BluetoothUUID = {
      getService,
      getCharacteristic,
      getDescriptor,
      canonicalUUID
    };
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/file-uri-to-path/index.js
var require_file_uri_to_path = __commonJS({
  "node_modules/file-uri-to-path/index.js"(exports, module) {
    var sep = require_path().sep || "/";
    module.exports = fileUriToPath;
    function fileUriToPath(uri) {
      if ("string" != typeof uri || uri.length <= 7 || "file://" != uri.substring(0, 7)) {
        throw new TypeError("must pass in a file:// URI to convert to a file path");
      }
      var rest = decodeURI(uri.substring(7));
      var firstSlash = rest.indexOf("/");
      var host = rest.substring(0, firstSlash);
      var path = rest.substring(firstSlash + 1);
      if ("localhost" == host) host = "";
      if (host) {
        host = sep + sep + host;
      }
      path = path.replace(/^(.+)\|/, "$1:");
      if (sep == "\\") {
        path = path.replace(/\//g, "\\");
      }
      if (/^.+\:/.test(path)) {
      } else {
        path = sep + path;
      }
      return host + path;
    }
  }
});

// node_modules/bindings/bindings.js
var require_bindings = __commonJS({
  "node_modules/bindings/bindings.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var fileURLToPath = require_file_uri_to_path();
    var join = path.join;
    var dirname = path.dirname;
    var exists = fs.accessSync && function(path2) {
      try {
        fs.accessSync(path2);
      } catch (e) {
        return false;
      }
      return true;
    } || fs.existsSync || path.existsSync;
    var defaults = {
      arrow: process.env.NODE_BINDINGS_ARROW || " → ",
      compiled: process.env.NODE_BINDINGS_COMPILED_DIR || "compiled",
      platform: process.platform,
      arch: process.arch,
      nodePreGyp: "node-v" + process.versions.modules + "-" + process.platform + "-" + process.arch,
      version: process.versions.node,
      bindings: "bindings.node",
      try: [
        // node-gyp's linked version in the "build" dir
        ["module_root", "build", "bindings"],
        // node-waf and gyp_addon (a.k.a node-gyp)
        ["module_root", "build", "Debug", "bindings"],
        ["module_root", "build", "Release", "bindings"],
        // Debug files, for development (legacy behavior, remove for node v0.9)
        ["module_root", "out", "Debug", "bindings"],
        ["module_root", "Debug", "bindings"],
        // Release files, but manually compiled (legacy behavior, remove for node v0.9)
        ["module_root", "out", "Release", "bindings"],
        ["module_root", "Release", "bindings"],
        // Legacy from node-waf, node <= 0.4.x
        ["module_root", "build", "default", "bindings"],
        // Production "Release" buildtype binary (meh...)
        ["module_root", "compiled", "version", "platform", "arch", "bindings"],
        // node-qbs builds
        ["module_root", "addon-build", "release", "install-root", "bindings"],
        ["module_root", "addon-build", "debug", "install-root", "bindings"],
        ["module_root", "addon-build", "default", "install-root", "bindings"],
        // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
        ["module_root", "lib", "binding", "nodePreGyp", "bindings"]
      ]
    };
    function bindings(opts) {
      if (typeof opts == "string") {
        opts = { bindings: opts };
      } else if (!opts) {
        opts = {};
      }
      Object.keys(defaults).map(function(i2) {
        if (!(i2 in opts)) opts[i2] = defaults[i2];
      });
      if (!opts.module_root) {
        opts.module_root = exports.getRoot(exports.getFileName());
      }
      if (path.extname(opts.bindings) != ".node") {
        opts.bindings += ".node";
      }
      var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
      var tries = [], i = 0, l = opts.try.length, n, b, err;
      for (; i < l; i++) {
        n = join.apply(
          null,
          opts.try[i].map(function(p) {
            return opts[p] || p;
          })
        );
        tries.push(n);
        try {
          b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
          if (!opts.path) {
            b.path = n;
          }
          return b;
        } catch (e) {
          if (e.code !== "MODULE_NOT_FOUND" && e.code !== "QUALIFIED_PATH_RESOLUTION_FAILED" && !/not find/i.test(e.message)) {
            throw e;
          }
        }
      }
      err = new Error(
        "Could not locate the bindings file. Tried:\n" + tries.map(function(a) {
          return opts.arrow + a;
        }).join("\n")
      );
      err.tries = tries;
      throw err;
    }
    module.exports = exports = bindings;
    exports.getFileName = function getFileName(calling_file) {
      var origPST = Error.prepareStackTrace, origSTL = Error.stackTraceLimit, dummy = {}, fileName;
      Error.stackTraceLimit = 10;
      Error.prepareStackTrace = function(e, st) {
        for (var i = 0, l = st.length; i < l; i++) {
          fileName = st[i].getFileName();
          if (fileName !== __filename) {
            if (calling_file) {
              if (fileName !== calling_file) {
                return;
              }
            } else {
              return;
            }
          }
        }
      };
      Error.captureStackTrace(dummy);
      dummy.stack;
      Error.prepareStackTrace = origPST;
      Error.stackTraceLimit = origSTL;
      var fileSchema = "file://";
      if (fileName.indexOf(fileSchema) === 0) {
        fileName = fileURLToPath(fileName);
      }
      return fileName;
    };
    exports.getRoot = function getRoot(file) {
      var dir = dirname(file), prev;
      while (true) {
        if (dir === ".") {
          dir = process.cwd();
        }
        if (exists(join(dir, "package.json")) || exists(join(dir, "node_modules"))) {
          return dir;
        }
        if (prev === dir) {
          throw new Error(
            'Could not find module root given file: "' + file + '". Do you have a `package.json` file? '
          );
        }
        prev = dir;
        dir = join(dir, "..");
      }
    };
  }
});

// node_modules/webbluetooth/dist/adapters/simpleble.js
var require_simpleble = __commonJS({
  "node_modules/webbluetooth/dist/adapters/simpleble.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressType = void 0;
    var simpleble = require_bindings()("simpleble.node");
    module.exports = simpleble;
    var AddressType;
    (function(AddressType2) {
      AddressType2[AddressType2["PUBLIC"] = 0] = "PUBLIC";
      AddressType2[AddressType2["RANDOM"] = 1] = "RANDOM";
      AddressType2[AddressType2["UNSPECIFIED"] = 2] = "UNSPECIFIED";
    })(AddressType = exports.AddressType || (exports.AddressType = {}));
  }
});

// node_modules/webbluetooth/dist/adapters/simpleble-adapter.js
var require_simpleble_adapter = __commonJS({
  "node_modules/webbluetooth/dist/adapters/simpleble-adapter.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimplebleAdapter = void 0;
    var events_1 = require_events();
    var uuid_1 = require_uuid();
    var simpleble_1 = require_simpleble();
    var SimplebleAdapter = (
      /** @class */
      function(_super) {
        __extends(SimplebleAdapter2, _super);
        function SimplebleAdapter2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.peripherals = /* @__PURE__ */ new Map();
          _this.servicesByPeripheral = /* @__PURE__ */ new Map();
          _this.peripheralByService = /* @__PURE__ */ new Map();
          _this.serviceByCharacteristic = /* @__PURE__ */ new Map();
          _this.characteristicsByService = /* @__PURE__ */ new Map();
          _this.characteristicByDescriptor = /* @__PURE__ */ new Map();
          _this.descriptors = /* @__PURE__ */ new Map();
          _this.charEvents = /* @__PURE__ */ new Map();
          return _this;
        }
        SimplebleAdapter2.prototype.validDevice = function(device, serviceUUIDs) {
          if (serviceUUIDs.length === 0) {
            return true;
          }
          if (!device._serviceUUIDs) {
            return false;
          }
          var advertisedUUIDs = device._serviceUUIDs.map(function(serviceUUID) {
            return uuid_1.BluetoothUUID.canonicalUUID(serviceUUID);
          });
          return serviceUUIDs.some(function(serviceUUID) {
            return advertisedUUIDs.indexOf(serviceUUID) >= 0;
          });
        };
        SimplebleAdapter2.prototype.buildBluetoothDevice = function(device) {
          var e_1, _a;
          var name = device.identifier;
          var address = device.address;
          var rssi = device.rssi;
          var txPower = device.txPower;
          var id = address || "".concat(name);
          var serviceUUIDs = [];
          var serviceData = /* @__PURE__ */ new Map();
          try {
            for (var _b = __values(device.services), _c = _b.next(); !_c.done; _c = _b.next()) {
              var service = _c.value;
              serviceUUIDs.push(service.uuid);
              if (service.data) {
                serviceData.set(service.uuid, service.data);
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          var manufacturerData = /* @__PURE__ */ new Map();
          for (var id_1 in device.manufacturerData) {
            manufacturerData.set(id_1, new DataView(device.manufacturerData[id_1].buffer));
          }
          return {
            id,
            name,
            _serviceUUIDs: serviceUUIDs,
            _adData: {
              rssi,
              txPower,
              serviceData,
              manufacturerData
            }
          };
        };
        SimplebleAdapter2.prototype.enumerate = function(peripheral) {
          var e_2, _a, e_3, _b, e_4, _c;
          this.servicesByPeripheral.clear();
          this.peripheralByService.clear();
          this.serviceByCharacteristic.clear();
          this.characteristicsByService.clear();
          this.characteristicByDescriptor.clear();
          this.descriptors.clear();
          this.charEvents.clear();
          var services = [];
          try {
            for (var _d = __values(peripheral.services), _e = _d.next(); !_e.done; _e = _d.next()) {
              var service = _e.value;
              var serviceUUID = uuid_1.BluetoothUUID.canonicalUUID(service.uuid);
              this.characteristicsByService.set(serviceUUID, service.characteristics);
              try {
                for (var _f = (e_3 = void 0, __values(service.characteristics)), _g = _f.next(); !_g.done; _g = _f.next()) {
                  var char = _g.value;
                  this.serviceByCharacteristic.set(char.uuid, serviceUUID);
                  this.descriptors.set(char.uuid, char.descriptors);
                  try {
                    for (var _h = (e_4 = void 0, __values(char.descriptors)), _j = _h.next(); !_j.done; _j = _h.next()) {
                      var desc = _j.value;
                      this.characteristicByDescriptor.set("".concat(char.uuid, "-").concat(desc), { char: char.uuid, desc });
                    }
                  } catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                  } finally {
                    try {
                      if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    } finally {
                      if (e_4) throw e_4.error;
                    }
                  }
                }
              } catch (e_3_1) {
                e_3 = { error: e_3_1 };
              } finally {
                try {
                  if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                } finally {
                  if (e_3) throw e_3.error;
                }
              }
              this.peripheralByService.set(service.uuid, peripheral);
              services.push(service);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          this.servicesByPeripheral.set(peripheral, services);
        };
        Object.defineProperty(SimplebleAdapter2.prototype, "state", {
          get: function() {
            var adapterEnabled = (0, simpleble_1.isEnabled)();
            return !!adapterEnabled;
          },
          enumerable: false,
          configurable: true
        });
        SimplebleAdapter2.prototype.getEnabled = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this.state];
            });
          });
        };
        SimplebleAdapter2.prototype.startScan = function(serviceUUIDs, foundFn) {
          return __awaiter(this, void 0, void 0, function() {
            var success;
            var _this = this;
            return __generator(this, function(_a) {
              if (this.state === false) {
                throw new Error("adapter not enabled");
              }
              if (!this.adapter) {
                this.adapter = (0, simpleble_1.getAdapters)()[0];
              }
              this.adapter.setCallbackOnScanFound(function(peripheral) {
                var device = _this.buildBluetoothDevice(peripheral);
                if (_this.validDevice(device, serviceUUIDs)) {
                  if (!_this.peripherals.has(device.id)) {
                    _this.peripherals.set(device.id, peripheral);
                    foundFn(device);
                  }
                }
              });
              this.peripherals.clear();
              success = this.adapter.scanStart();
              if (!success) {
                throw new Error("scan start failed");
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.stopScan = function(_errorFn) {
          if (this.adapter) {
            var success = this.adapter.scanStop();
            if (!success) {
              throw new Error("scan stop failed");
            }
          }
        };
        SimplebleAdapter2.prototype.connect = function(id, disconnectFn) {
          return __awaiter(this, void 0, void 0, function() {
            var peripheral, success;
            return __generator(this, function(_a) {
              peripheral = this.peripherals.get(id);
              if (!peripheral) {
                throw new Error("Peripheral not found");
              }
              if (!peripheral.connectable) {
                throw new Error("Connection not possible");
              }
              success = peripheral.connect();
              if (!success) {
                throw new Error("Connect failed");
              }
              this.enumerate(peripheral);
              if (disconnectFn) {
                peripheral.setCallbackOnDisconnected(function() {
                  return disconnectFn();
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.disconnect = function(id) {
          return __awaiter(this, void 0, void 0, function() {
            var peripheral, success;
            return __generator(this, function(_a) {
              peripheral = this.peripherals.get(id);
              if (!peripheral) {
                throw new Error("Peripheral not found");
              }
              success = peripheral.disconnect();
              if (!success) {
                throw new Error("Disconnect failed");
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.discoverServices = function(id, serviceUUIDs) {
          return __awaiter(this, void 0, void 0, function() {
            var peripheral, discovered, _a, _b, service;
            var e_5, _c;
            return __generator(this, function(_d) {
              peripheral = this.peripherals.get(id);
              if (!peripheral) {
                throw new Error("Peripheral not found");
              }
              discovered = [];
              try {
                for (_a = __values(peripheral.services), _b = _a.next(); !_b.done; _b = _a.next()) {
                  service = _b.value;
                  if (!serviceUUIDs || serviceUUIDs.length === 0 || serviceUUIDs.indexOf(service.uuid) >= 0) {
                    discovered.push({
                      uuid: service.uuid,
                      isPrimary: true
                    });
                  }
                }
              } catch (e_5_1) {
                e_5 = { error: e_5_1 };
              } finally {
                try {
                  if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally {
                  if (e_5) throw e_5.error;
                }
              }
              return [2, discovered];
            });
          });
        };
        SimplebleAdapter2.prototype.discoverIncludedServices = function(_handle, _serviceUUIDs) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, []];
            });
          });
        };
        SimplebleAdapter2.prototype.discoverCharacteristics = function(serviceUuid, characteristicUUIDs) {
          return __awaiter(this, void 0, void 0, function() {
            var peripheral, characteristics, discovered, _loop_1, characteristics_1, characteristics_1_1, characteristic;
            var e_6, _a;
            var _this = this;
            return __generator(this, function(_b) {
              peripheral = this.peripheralByService.get(serviceUuid);
              characteristics = this.characteristicsByService.get(serviceUuid);
              discovered = [];
              _loop_1 = function(characteristic2) {
                var charUUID = uuid_1.BluetoothUUID.canonicalUUID(characteristic2.uuid);
                if (!characteristicUUIDs || characteristicUUIDs.length === 0 || characteristicUUIDs.indexOf(charUUID) >= 0) {
                  discovered.push({
                    uuid: charUUID,
                    properties: {
                      // Not all of these are supported in SimpleBle
                      // broadcast: characteristic.capabilities.includes('???'),
                      read: characteristic2.canRead,
                      writeWithoutResponse: characteristic2.canWriteRequest,
                      write: characteristic2.canWriteCommand,
                      notify: characteristic2.canNotify,
                      indicate: characteristic2.canIndicate
                      // authenticatedSignedWrites: characteristic.capabilities.includes('???'),
                      // reliableWrite: characteristic.capabilities.includes('???'),
                      // writableAuxiliaries: characteristic.capabilities.includes('???'),
                    }
                  });
                  if (characteristic2.canIndicate) {
                    peripheral.indicate(serviceUuid, charUUID, function(data) {
                      if (_this.charEvents.has(charUUID)) {
                        _this.charEvents.get(charUUID)(new DataView(data.buffer));
                      }
                    });
                  }
                  if (characteristic2.canNotify) {
                    peripheral.notify(serviceUuid, charUUID, function(data) {
                      if (_this.charEvents.has(charUUID)) {
                        _this.charEvents.get(charUUID)(new DataView(data.buffer));
                      }
                    });
                  }
                }
              };
              try {
                for (characteristics_1 = __values(characteristics), characteristics_1_1 = characteristics_1.next(); !characteristics_1_1.done; characteristics_1_1 = characteristics_1.next()) {
                  characteristic = characteristics_1_1.value;
                  _loop_1(characteristic);
                }
              } catch (e_6_1) {
                e_6 = { error: e_6_1 };
              } finally {
                try {
                  if (characteristics_1_1 && !characteristics_1_1.done && (_a = characteristics_1.return)) _a.call(characteristics_1);
                } finally {
                  if (e_6) throw e_6.error;
                }
              }
              return [2, discovered];
            });
          });
        };
        SimplebleAdapter2.prototype.discoverDescriptors = function(charUuid, descriptorUUIDs) {
          return __awaiter(this, void 0, void 0, function() {
            var descriptors, discovered, descriptors_1, descriptors_1_1, descriptor, descUUID;
            var e_7, _a;
            return __generator(this, function(_b) {
              descriptors = this.descriptors.get(charUuid);
              discovered = [];
              try {
                for (descriptors_1 = __values(descriptors), descriptors_1_1 = descriptors_1.next(); !descriptors_1_1.done; descriptors_1_1 = descriptors_1.next()) {
                  descriptor = descriptors_1_1.value;
                  descUUID = uuid_1.BluetoothUUID.canonicalUUID(descriptor);
                  if (!descriptorUUIDs || descriptorUUIDs.length === 0 || descriptorUUIDs.indexOf(descUUID) >= 0) {
                    discovered.push({
                      uuid: descUUID
                    });
                  }
                }
              } catch (e_7_1) {
                e_7 = { error: e_7_1 };
              } finally {
                try {
                  if (descriptors_1_1 && !descriptors_1_1.done && (_a = descriptors_1.return)) _a.call(descriptors_1);
                } finally {
                  if (e_7) throw e_7.error;
                }
              }
              return [2, discovered];
            });
          });
        };
        SimplebleAdapter2.prototype.readCharacteristic = function(charUuid) {
          return __awaiter(this, void 0, void 0, function() {
            var serviceUuid, peripheral, data;
            return __generator(this, function(_a) {
              serviceUuid = this.serviceByCharacteristic.get(charUuid);
              peripheral = this.peripheralByService.get(serviceUuid);
              data = peripheral.read(serviceUuid, charUuid);
              return [2, new DataView(data.buffer)];
            });
          });
        };
        SimplebleAdapter2.prototype.writeCharacteristic = function(charUuid, value, withoutResponse) {
          if (withoutResponse === void 0) {
            withoutResponse = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            var serviceUuid, peripheral, success;
            return __generator(this, function(_a) {
              serviceUuid = this.serviceByCharacteristic.get(charUuid);
              peripheral = this.peripheralByService.get(serviceUuid);
              success = false;
              if (withoutResponse) {
                success = peripheral.writeCommand(serviceUuid, charUuid, new Uint8Array(value.buffer));
              } else {
                success = peripheral.writeRequest(serviceUuid, charUuid, new Uint8Array(value.buffer));
              }
              if (!success) {
                throw new Error("Write failed");
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.enableNotify = function(handle, notifyFn) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.charEvents.set(handle, notifyFn);
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.disableNotify = function(handle) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.charEvents.delete(handle);
              return [
                2
                /*return*/
              ];
            });
          });
        };
        SimplebleAdapter2.prototype.readDescriptor = function(handle) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, char, desc, serviceUuid, peripheral, data;
            return __generator(this, function(_b) {
              _a = this.characteristicByDescriptor.get(handle), char = _a.char, desc = _a.desc;
              serviceUuid = this.serviceByCharacteristic.get(char);
              peripheral = this.peripheralByService.get(serviceUuid);
              data = peripheral.readDescriptor(serviceUuid, char, desc);
              if (!data) {
                throw new Error("Read failed");
              }
              return [2, new DataView(data.buffer)];
            });
          });
        };
        SimplebleAdapter2.prototype.writeDescriptor = function(handle, value) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, char, desc, serviceUuid, peripheral, success;
            return __generator(this, function(_b) {
              _a = this.characteristicByDescriptor.get(handle), char = _a.char, desc = _a.desc;
              serviceUuid = this.serviceByCharacteristic.get(char);
              peripheral = this.peripheralByService.get(serviceUuid);
              success = peripheral.writeDescriptor(serviceUuid, char, desc, new Uint8Array(value.buffer));
              if (!success) {
                throw new Error("Write failed");
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        return SimplebleAdapter2;
      }(events_1.EventEmitter)
    );
    exports.SimplebleAdapter = SimplebleAdapter;
  }
});

// node_modules/webbluetooth/dist/adapters/index.js
var require_adapters = __commonJS({
  "node_modules/webbluetooth/dist/adapters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.adapter = exports.EVENT_ENABLED = void 0;
    var simpleble_adapter_1 = require_simpleble_adapter();
    exports.EVENT_ENABLED = "enabledchanged";
    exports.adapter = new simpleble_adapter_1.SimplebleAdapter();
  }
});

// node_modules/webbluetooth/dist/descriptor.js
var require_descriptor = __commonJS({
  "node_modules/webbluetooth/dist/descriptor.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothRemoteGATTDescriptorImpl = void 0;
    var adapters_1 = require_adapters();
    var BluetoothRemoteGATTDescriptorImpl = (
      /** @class */
      function() {
        function BluetoothRemoteGATTDescriptorImpl2(init) {
          this.characteristic = void 0;
          this.uuid = void 0;
          this._value = void 0;
          this.handle = void 0;
          this.characteristic = init.characteristic;
          this.uuid = init.uuid;
          this._value = init.value;
          this.handle = "".concat(this.characteristic.uuid, "-").concat(this.uuid);
        }
        Object.defineProperty(BluetoothRemoteGATTDescriptorImpl2.prototype, "value", {
          /**
           * The value of the descriptor
           */
          get: function() {
            return this._value;
          },
          enumerable: false,
          configurable: true
        });
        BluetoothRemoteGATTDescriptorImpl2.prototype.readValue = function() {
          return __awaiter(this, void 0, void 0, function() {
            var dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.characteristic.service.device.gatt.connected) {
                    throw new Error("readValue error: device not connected");
                  }
                  return [4, adapters_1.adapter.readDescriptor(this.handle)];
                case 1:
                  dataView = _a.sent();
                  this._value = dataView;
                  return [2, dataView];
              }
            });
          });
        };
        BluetoothRemoteGATTDescriptorImpl2.prototype.writeValue = function(value) {
          return __awaiter(this, void 0, void 0, function() {
            var isView, arrayBuffer, dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.characteristic.service.device.gatt.connected) {
                    throw new Error("writeValue error: device not connected");
                  }
                  isView = function(source) {
                    return source.buffer !== void 0;
                  };
                  arrayBuffer = isView(value) ? value.buffer : value;
                  dataView = new DataView(arrayBuffer);
                  return [4, adapters_1.adapter.writeDescriptor(this.handle, dataView)];
                case 1:
                  _a.sent();
                  this._value = dataView;
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return BluetoothRemoteGATTDescriptorImpl2;
      }()
    );
    exports.BluetoothRemoteGATTDescriptorImpl = BluetoothRemoteGATTDescriptorImpl;
  }
});

// node_modules/webbluetooth/dist/events.js
var require_events2 = __commonJS({
  "node_modules/webbluetooth/dist/events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DOMEvent = exports.EventDispatcher = void 0;
    var events_1 = require_events();
    var EventDispatcher = (
      /** @class */
      function() {
        function EventDispatcher2() {
          this.emitter = new events_1.EventEmitter();
          this.isEventListenerObject = function(listener) {
            return listener.handleEvent !== void 0;
          };
        }
        EventDispatcher2.prototype.addEventListener = function(type, listener) {
          if (listener) {
            var handler = this.isEventListenerObject(listener) ? listener.handleEvent : listener;
            this.emitter.addListener(type, handler);
          }
        };
        EventDispatcher2.prototype.removeEventListener = function(type, callback) {
          if (callback) {
            var handler = this.isEventListenerObject(callback) ? callback.handleEvent : callback;
            this.emitter.removeListener(type, handler);
          }
        };
        EventDispatcher2.prototype.dispatchEvent = function(event) {
          return this.emitter.emit(event.type, event);
        };
        return EventDispatcher2;
      }()
    );
    exports.EventDispatcher = EventDispatcher;
    var DOMEvent = (
      /** @class */
      function() {
        function DOMEvent2(target, type) {
          this.bubbles = true;
          this.cancelable = false;
          this.cancelBubble = false;
          this.composed = false;
          this.defaultPrevented = false;
          this.eventPhase = 0;
          this.isTrusted = true;
          this.returnValue = true;
          this.target = target;
          this.srcElement = target;
          this.currentTarget = target;
          this.type = type;
        }
        DOMEvent2.prototype.composedPath = function() {
          return [];
        };
        DOMEvent2.prototype.initEvent = function(type, bubbles, cancelable) {
          this.type = type;
          this.bubbles = bubbles;
          this.cancelable = cancelable;
        };
        DOMEvent2.prototype.preventDefault = function() {
          this.defaultPrevented = true;
        };
        DOMEvent2.prototype.stopImmediatePropagation = function() {
          return;
        };
        DOMEvent2.prototype.stopPropagation = function() {
          return;
        };
        return DOMEvent2;
      }()
    );
    exports.DOMEvent = DOMEvent;
  }
});

// node_modules/webbluetooth/dist/characteristic.js
var require_characteristic = __commonJS({
  "node_modules/webbluetooth/dist/characteristic.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothRemoteGATTCharacteristicImpl = void 0;
    var adapters_1 = require_adapters();
    var descriptor_1 = require_descriptor();
    var uuid_1 = require_uuid();
    var events_1 = require_events2();
    var isView = function(source) {
      return source.buffer !== void 0;
    };
    var BluetoothRemoteGATTCharacteristicImpl = (
      /** @class */
      function(_super) {
        __extends(BluetoothRemoteGATTCharacteristicImpl2, _super);
        function BluetoothRemoteGATTCharacteristicImpl2(init) {
          var _this = _super.call(this) || this;
          _this.service = void 0;
          _this.uuid = void 0;
          _this._value = void 0;
          _this.handle = void 0;
          _this.descriptors = void 0;
          _this.service = init.service;
          _this.uuid = init.uuid;
          _this.properties = init.properties;
          _this._value = init.value;
          _this.handle = _this.uuid;
          return _this;
        }
        Object.defineProperty(BluetoothRemoteGATTCharacteristicImpl2.prototype, "value", {
          /**
           * The value of the characteristic
           */
          get: function() {
            return this._value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothRemoteGATTCharacteristicImpl2.prototype, "oncharacteristicvaluechanged", {
          set: function(fn) {
            if (this._oncharacteristicvaluechanged) {
              this.removeEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
              this._oncharacteristicvaluechanged = void 0;
            }
            if (fn) {
              this._oncharacteristicvaluechanged = fn;
              this.addEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        BluetoothRemoteGATTCharacteristicImpl2.prototype.setValue = function(value, emit) {
          this._value = value;
          if (emit) {
            this.dispatchEvent(new events_1.DOMEvent(this, "characteristicvaluechanged"));
            this.service.dispatchEvent(new events_1.DOMEvent(this, "characteristicvaluechanged"));
            this.service.device.dispatchEvent(new events_1.DOMEvent(this, "characteristicvaluechanged"));
            this.service.device._bluetooth.dispatchEvent(new events_1.DOMEvent(this, "characteristicvaluechanged"));
          }
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.getDescriptor = function(descriptor) {
          return __awaiter(this, void 0, void 0, function() {
            var descriptors;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("getDescriptor error: device not connected");
                  }
                  if (!descriptor) {
                    throw new Error("getDescriptor error: no descriptor specified");
                  }
                  return [4, this.getDescriptors(descriptor)];
                case 1:
                  descriptors = _a.sent();
                  if (descriptors.length !== 1) {
                    throw new Error("getDescriptor error: descriptor not found");
                  }
                  return [2, descriptors[0]];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.getDescriptors = function(descriptor) {
          return __awaiter(this, void 0, void 0, function() {
            var descriptors, filtered;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("getDescriptors error: device not connected");
                  }
                  if (!!this.descriptors) return [3, 2];
                  return [4, adapters_1.adapter.discoverDescriptors(this.handle)];
                case 1:
                  descriptors = _a.sent();
                  this.descriptors = descriptors.map(function(descriptorInfo) {
                    Object.assign(descriptorInfo, {
                      characteristic: _this
                    });
                    return new descriptor_1.BluetoothRemoteGATTDescriptorImpl(descriptorInfo);
                  });
                  _a.label = 2;
                case 2:
                  if (!descriptor) {
                    return [2, this.descriptors];
                  }
                  filtered = this.descriptors.filter(function(descriptorObject) {
                    return descriptorObject.uuid === uuid_1.BluetoothUUID.getDescriptor(descriptor);
                  });
                  if (filtered.length !== 1) {
                    throw new Error("getDescriptors error: descriptor not found");
                  }
                  return [2, filtered];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.readValue = function() {
          return __awaiter(this, void 0, void 0, function() {
            var dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("readValue error: device not connected");
                  }
                  return [4, adapters_1.adapter.readCharacteristic(this.handle)];
                case 1:
                  dataView = _a.sent();
                  this.setValue(dataView, true);
                  return [2, dataView];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.writeValue = function(value) {
          return __awaiter(this, void 0, void 0, function() {
            var arrayBuffer, dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("writeValue error: device not connected");
                  }
                  arrayBuffer = isView(value) ? value.buffer : value;
                  dataView = new DataView(arrayBuffer);
                  return [4, adapters_1.adapter.writeCharacteristic(this.handle, dataView)];
                case 1:
                  _a.sent();
                  this.setValue(dataView);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.writeValueWithResponse = function(value) {
          return __awaiter(this, void 0, void 0, function() {
            var arrayBuffer, dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("writeValue error: device not connected");
                  }
                  arrayBuffer = isView(value) ? value.buffer : value;
                  dataView = new DataView(arrayBuffer);
                  return [4, adapters_1.adapter.writeCharacteristic(this.handle, dataView, false)];
                case 1:
                  _a.sent();
                  this.setValue(dataView);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.writeValueWithoutResponse = function(value) {
          return __awaiter(this, void 0, void 0, function() {
            var arrayBuffer, dataView;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("writeValue error: device not connected");
                  }
                  arrayBuffer = isView(value) ? value.buffer : value;
                  dataView = new DataView(arrayBuffer);
                  return [4, adapters_1.adapter.writeCharacteristic(this.handle, dataView, true)];
                case 1:
                  _a.sent();
                  this.setValue(dataView);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.startNotifications = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("startNotifications error: device not connected");
                  }
                  return [4, adapters_1.adapter.enableNotify(this.handle, function(dataView) {
                    _this.setValue(dataView, true);
                  })];
                case 1:
                  _a.sent();
                  return [2, this];
              }
            });
          });
        };
        BluetoothRemoteGATTCharacteristicImpl2.prototype.stopNotifications = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.service.device.gatt.connected) {
                    throw new Error("stopNotifications error: device not connected");
                  }
                  return [4, adapters_1.adapter.disableNotify(this.handle)];
                case 1:
                  _a.sent();
                  return [2, this];
              }
            });
          });
        };
        return BluetoothRemoteGATTCharacteristicImpl2;
      }(events_1.EventDispatcher)
    );
    exports.BluetoothRemoteGATTCharacteristicImpl = BluetoothRemoteGATTCharacteristicImpl;
  }
});

// node_modules/webbluetooth/dist/service.js
var require_service = __commonJS({
  "node_modules/webbluetooth/dist/service.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothRemoteGATTServiceImpl = void 0;
    var adapters_1 = require_adapters();
    var characteristic_1 = require_characteristic();
    var uuid_1 = require_uuid();
    var events_1 = require_events2();
    var BluetoothRemoteGATTServiceImpl = (
      /** @class */
      function(_super) {
        __extends(BluetoothRemoteGATTServiceImpl2, _super);
        function BluetoothRemoteGATTServiceImpl2(init) {
          var _this = _super.call(this) || this;
          _this.device = void 0;
          _this.uuid = void 0;
          _this.isPrimary = false;
          _this.handle = void 0;
          _this.services = void 0;
          _this.characteristics = void 0;
          _this.device = init.device;
          _this.uuid = init.uuid;
          _this.isPrimary = init.isPrimary;
          _this.handle = _this.uuid;
          _this.dispatchEvent(new events_1.DOMEvent(_this, "serviceadded"));
          _this.device.dispatchEvent(new events_1.DOMEvent(_this, "serviceadded"));
          _this.device._bluetooth.dispatchEvent(new events_1.DOMEvent(_this, "serviceadded"));
          return _this;
        }
        Object.defineProperty(BluetoothRemoteGATTServiceImpl2.prototype, "oncharacteristicvaluechanged", {
          set: function(fn) {
            if (this._oncharacteristicvaluechanged) {
              this.removeEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
              this._oncharacteristicvaluechanged = void 0;
            }
            if (fn) {
              this._oncharacteristicvaluechanged = fn;
              this.addEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothRemoteGATTServiceImpl2.prototype, "onserviceadded", {
          set: function(fn) {
            if (this._onserviceadded) {
              this.removeEventListener("serviceadded", this._onserviceadded);
              this._onserviceadded = void 0;
            }
            if (fn) {
              this._onserviceadded = fn;
              this.addEventListener("serviceadded", this._onserviceadded);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothRemoteGATTServiceImpl2.prototype, "onservicechanged", {
          set: function(fn) {
            if (this._onservicechanged) {
              this.removeEventListener("servicechanged", this._onservicechanged);
              this._onservicechanged = void 0;
            }
            if (fn) {
              this._onservicechanged = fn;
              this.addEventListener("servicechanged", this._onservicechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothRemoteGATTServiceImpl2.prototype, "onserviceremoved", {
          set: function(fn) {
            if (this._onserviceremoved) {
              this.removeEventListener("serviceremoved", this._onserviceremoved);
              this._onserviceremoved = void 0;
            }
            if (fn) {
              this._onserviceremoved = fn;
              this.addEventListener("serviceremoved", this._onserviceremoved);
            }
          },
          enumerable: false,
          configurable: true
        });
        BluetoothRemoteGATTServiceImpl2.prototype.getCharacteristic = function(characteristic) {
          return __awaiter(this, void 0, void 0, function() {
            var characteristics;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.device.gatt.connected) {
                    throw new Error("getCharacteristic error: device not connected");
                  }
                  if (!characteristic) {
                    throw new Error("getCharacteristic error: no characteristic specified");
                  }
                  return [4, this.getCharacteristics(characteristic)];
                case 1:
                  characteristics = _a.sent();
                  if (characteristics.length !== 1) {
                    throw new Error("getCharacteristic error: characteristic not found");
                  }
                  return [2, characteristics[0]];
              }
            });
          });
        };
        BluetoothRemoteGATTServiceImpl2.prototype.getCharacteristics = function(characteristic) {
          return __awaiter(this, void 0, void 0, function() {
            var characteristics, filtered;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.device.gatt.connected) {
                    throw new Error("getCharacteristics error: device not connected");
                  }
                  if (!!this.characteristics) return [3, 2];
                  return [4, adapters_1.adapter.discoverCharacteristics(this.handle)];
                case 1:
                  characteristics = _a.sent();
                  this.characteristics = characteristics.map(function(characteristicInfo) {
                    Object.assign(characteristicInfo, {
                      service: _this
                    });
                    return new characteristic_1.BluetoothRemoteGATTCharacteristicImpl(characteristicInfo);
                  });
                  _a.label = 2;
                case 2:
                  if (!characteristic) {
                    return [2, this.characteristics];
                  }
                  characteristic = uuid_1.BluetoothUUID.getCharacteristic(characteristic);
                  filtered = this.characteristics.filter(function(characteristicObject) {
                    return characteristicObject.uuid === characteristic;
                  });
                  if (filtered.length !== 1) {
                    throw new Error("getCharacteristics error: characteristic not found");
                  }
                  return [2, filtered];
              }
            });
          });
        };
        BluetoothRemoteGATTServiceImpl2.prototype.getIncludedService = function(service) {
          return __awaiter(this, void 0, void 0, function() {
            var services;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.device.gatt.connected) {
                    throw new Error("getIncludedService error: device not connected");
                  }
                  if (!service) {
                    throw new Error("getIncludedService error: no service specified");
                  }
                  return [4, this.getIncludedServices(service)];
                case 1:
                  services = _a.sent();
                  if (services.length !== 1) {
                    throw new Error("getIncludedService error: service not found");
                  }
                  return [2, services[0]];
              }
            });
          });
        };
        BluetoothRemoteGATTServiceImpl2.prototype.getIncludedServices = function(service) {
          return __awaiter(this, void 0, void 0, function() {
            var services, filtered;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.device.gatt.connected) {
                    throw new Error("getIncludedServices error: device not connected");
                  }
                  if (!!this.services) return [3, 2];
                  return [4, adapters_1.adapter.discoverIncludedServices(this.handle, this.device._allowedServices)];
                case 1:
                  services = _a.sent();
                  this.services = services.map(function(serviceInfo) {
                    Object.assign(serviceInfo, {
                      device: _this.device
                    });
                    return new BluetoothRemoteGATTServiceImpl2(serviceInfo);
                  });
                  _a.label = 2;
                case 2:
                  if (!service) {
                    return [2, this.services];
                  }
                  filtered = this.services.filter(function(serviceObject) {
                    return serviceObject.uuid === uuid_1.BluetoothUUID.getService(service);
                  });
                  if (filtered.length !== 1) {
                    throw new Error("getIncludedServices error: service not found");
                  }
                  return [2, filtered];
              }
            });
          });
        };
        return BluetoothRemoteGATTServiceImpl2;
      }(events_1.EventDispatcher)
    );
    exports.BluetoothRemoteGATTServiceImpl = BluetoothRemoteGATTServiceImpl;
  }
});

// node_modules/webbluetooth/dist/server.js
var require_server = __commonJS({
  "node_modules/webbluetooth/dist/server.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothRemoteGATTServerImpl = void 0;
    var uuid_1 = require_uuid();
    var adapters_1 = require_adapters();
    var service_1 = require_service();
    var events_1 = require_events2();
    var BluetoothRemoteGATTServerImpl = (
      /** @class */
      function() {
        function BluetoothRemoteGATTServerImpl2(device) {
          this.device = void 0;
          this._connected = false;
          this.handle = void 0;
          this.services = void 0;
          this.device = device;
          this.handle = this.device.id;
        }
        Object.defineProperty(BluetoothRemoteGATTServerImpl2.prototype, "connected", {
          /**
           * Whether the gatt server is connected
           */
          get: function() {
            return this._connected;
          },
          enumerable: false,
          configurable: true
        });
        BluetoothRemoteGATTServerImpl2.prototype.connect = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (this.connected) {
                    throw new Error("connect error: device already connected");
                  }
                  return [4, adapters_1.adapter.connect(this.handle, function() {
                    _this.services = void 0;
                    _this._connected = false;
                    _this.device.dispatchEvent(new events_1.DOMEvent(_this.device, "gattserverdisconnected"));
                    _this.device._bluetooth.dispatchEvent(new events_1.DOMEvent(_this.device, "gattserverdisconnected"));
                  })];
                case 1:
                  _a.sent();
                  this._connected = true;
                  return [2, this];
              }
            });
          });
        };
        BluetoothRemoteGATTServerImpl2.prototype.disconnect = function() {
          adapters_1.adapter.disconnect(this.handle);
          this._connected = false;
        };
        BluetoothRemoteGATTServerImpl2.prototype.getPrimaryService = function(service) {
          return __awaiter(this, void 0, void 0, function() {
            var services;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.connected) {
                    throw new Error("getPrimaryService error: device not connected");
                  }
                  if (!service) {
                    throw new Error("getPrimaryService error: no service specified");
                  }
                  return [4, this.getPrimaryServices(service)];
                case 1:
                  services = _a.sent();
                  if (services.length !== 1) {
                    throw new Error("getPrimaryService error: service not found");
                  }
                  return [2, services[0]];
              }
            });
          });
        };
        BluetoothRemoteGATTServerImpl2.prototype.getPrimaryServices = function(service) {
          return __awaiter(this, void 0, void 0, function() {
            var services, filtered;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.connected) {
                    throw new Error("getPrimaryServices error: device not connected");
                  }
                  if (!!this.services) return [3, 2];
                  return [4, adapters_1.adapter.discoverServices(this.handle, this.device._allowedServices)];
                case 1:
                  services = _a.sent();
                  this.services = services.map(function(serviceInfo) {
                    Object.assign(serviceInfo, {
                      device: _this.device
                    });
                    return new service_1.BluetoothRemoteGATTServiceImpl(serviceInfo);
                  });
                  _a.label = 2;
                case 2:
                  if (!service) {
                    return [2, this.services];
                  }
                  filtered = this.services.filter(function(serviceObject) {
                    return serviceObject.uuid === uuid_1.BluetoothUUID.getService(service);
                  });
                  if (filtered.length !== 1) {
                    throw new Error("getPrimaryServices error: service not found");
                  }
                  return [2, filtered];
              }
            });
          });
        };
        return BluetoothRemoteGATTServerImpl2;
      }()
    );
    exports.BluetoothRemoteGATTServerImpl = BluetoothRemoteGATTServerImpl;
  }
});

// node_modules/webbluetooth/dist/device.js
var require_device = __commonJS({
  "node_modules/webbluetooth/dist/device.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothDeviceImpl = void 0;
    var server_1 = require_server();
    var events_1 = require_events2();
    var BluetoothDeviceImpl = (
      /** @class */
      function(_super) {
        __extends(BluetoothDeviceImpl2, _super);
        function BluetoothDeviceImpl2(init, forgetFn) {
          var _this = _super.call(this) || this;
          _this.forgetFn = forgetFn;
          _this.id = void 0;
          _this.name = void 0;
          _this.gatt = void 0;
          _this.watchingAdvertisements = false;
          _this._bluetooth = void 0;
          _this._allowedServices = [];
          _this._serviceUUIDs = [];
          _this.id = init.id;
          _this.name = init.name;
          _this.gatt = init.gatt;
          _this._adData = init._adData;
          _this._bluetooth = init._bluetooth;
          _this._allowedServices = init._allowedServices;
          _this._serviceUUIDs = init._serviceUUIDs;
          if (!_this.name)
            _this.name = "Unknown or Unsupported Device (".concat(_this.id, ")");
          if (!_this.gatt)
            _this.gatt = new server_1.BluetoothRemoteGATTServerImpl(_this);
          return _this;
        }
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "oncharacteristicvaluechanged", {
          set: function(fn) {
            if (this._oncharacteristicvaluechanged) {
              this.removeEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
              this._oncharacteristicvaluechanged = void 0;
            }
            if (fn) {
              this._oncharacteristicvaluechanged = fn;
              this.addEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "onserviceadded", {
          set: function(fn) {
            if (this._onserviceadded) {
              this.removeEventListener("serviceadded", this._onserviceadded);
              this._onserviceadded = void 0;
            }
            if (fn) {
              this._onserviceadded = fn;
              this.addEventListener("serviceadded", this._onserviceadded);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "onservicechanged", {
          set: function(fn) {
            if (this._onservicechanged) {
              this.removeEventListener("servicechanged", this._onservicechanged);
              this._onservicechanged = void 0;
            }
            if (fn) {
              this._onservicechanged = fn;
              this.addEventListener("servicechanged", this._onservicechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "onserviceremoved", {
          set: function(fn) {
            if (this._onserviceremoved) {
              this.removeEventListener("serviceremoved", this._onserviceremoved);
              this._onserviceremoved = void 0;
            }
            if (fn) {
              this._onserviceremoved = fn;
              this.addEventListener("serviceremoved", this._onserviceremoved);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "ongattserverdisconnected", {
          set: function(fn) {
            if (this._ongattserverdisconnected) {
              this.removeEventListener("gattserverdisconnected", this._ongattserverdisconnected);
              this._ongattserverdisconnected = void 0;
            }
            if (fn) {
              this._ongattserverdisconnected = fn;
              this.addEventListener("gattserverdisconnected", this._ongattserverdisconnected);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothDeviceImpl2.prototype, "onadvertisementreceived", {
          set: function(fn) {
            if (this._onadvertisementreceived) {
              this.removeEventListener("advertisementreceived", this._onadvertisementreceived);
              this._onadvertisementreceived = void 0;
            }
            if (fn) {
              this._onadvertisementreceived = fn;
              this.addEventListener("advertisementreceived", this._onadvertisementreceived);
            }
          },
          enumerable: false,
          configurable: true
        });
        BluetoothDeviceImpl2.prototype.watchAdvertisements = function() {
          throw new Error("watchAdvertisements error: method not implemented");
        };
        BluetoothDeviceImpl2.prototype.unwatchAdvertisements = function() {
          throw new Error("unwatchAdvertisements error: method not implemented");
        };
        BluetoothDeviceImpl2.prototype.forget = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.forgetFn();
              return [
                2
                /*return*/
              ];
            });
          });
        };
        return BluetoothDeviceImpl2;
      }(events_1.EventDispatcher)
    );
    exports.BluetoothDeviceImpl = BluetoothDeviceImpl;
  }
});

// node_modules/webbluetooth/dist/bluetooth.js
var require_bluetooth = __commonJS({
  "node_modules/webbluetooth/dist/bluetooth.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BluetoothImpl = void 0;
    var adapters_1 = require_adapters();
    var device_1 = require_device();
    var uuid_1 = require_uuid();
    var events_1 = require_events2();
    var BluetoothImpl = (
      /** @class */
      function(_super) {
        __extends(BluetoothImpl2, _super);
        function BluetoothImpl2(options) {
          if (options === void 0) {
            options = {};
          }
          var _this = _super.call(this) || this;
          _this.options = options;
          _this.deviceFound = void 0;
          _this.scanTime = 10.24 * 1e3;
          _this.scanner = void 0;
          _this.allowedDevices = /* @__PURE__ */ new Set();
          _this.referringDevice = options.referringDevice;
          _this.deviceFound = options.deviceFound;
          if (options.scanTime) {
            _this.scanTime = options.scanTime * 1e3;
          }
          adapters_1.adapter.on(adapters_1.EVENT_ENABLED, function(_value) {
            _this.dispatchEvent(new events_1.DOMEvent(_this, "availabilitychanged"));
          });
          return _this;
        }
        Object.defineProperty(BluetoothImpl2.prototype, "oncharacteristicvaluechanged", {
          set: function(fn) {
            if (this._oncharacteristicvaluechanged) {
              this.removeEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
              this._oncharacteristicvaluechanged = void 0;
            }
            if (fn) {
              this._oncharacteristicvaluechanged = fn;
              this.addEventListener("characteristicvaluechanged", this._oncharacteristicvaluechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "onserviceadded", {
          set: function(fn) {
            if (this._onserviceadded) {
              this.removeEventListener("serviceadded", this._onserviceadded);
              this._onserviceadded = void 0;
            }
            if (fn) {
              this._onserviceadded = fn;
              this.addEventListener("serviceadded", this._onserviceadded);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "onservicechanged", {
          set: function(fn) {
            if (this._onservicechanged) {
              this.removeEventListener("servicechanged", this._onservicechanged);
              this._onservicechanged = void 0;
            }
            if (fn) {
              this._onservicechanged = fn;
              this.addEventListener("servicechanged", this._onservicechanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "onserviceremoved", {
          set: function(fn) {
            if (this._onserviceremoved) {
              this.removeEventListener("serviceremoved", this._onserviceremoved);
              this._onserviceremoved = void 0;
            }
            if (fn) {
              this._onserviceremoved = fn;
              this.addEventListener("serviceremoved", this._onserviceremoved);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "ongattserverdisconnected", {
          set: function(fn) {
            if (this._ongattserverdisconnected) {
              this.removeEventListener("gattserverdisconnected", this._ongattserverdisconnected);
              this._ongattserverdisconnected = void 0;
            }
            if (fn) {
              this._ongattserverdisconnected = fn;
              this.addEventListener("gattserverdisconnected", this._ongattserverdisconnected);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "onadvertisementreceived", {
          set: function(fn) {
            if (this._onadvertisementreceived) {
              this.removeEventListener("advertisementreceived", this._onadvertisementreceived);
              this._onadvertisementreceived = void 0;
            }
            if (fn) {
              this._onadvertisementreceived = fn;
              this.addEventListener("advertisementreceived", this._onadvertisementreceived);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BluetoothImpl2.prototype, "onavailabilitychanged", {
          set: function(fn) {
            if (this._onavailabilitychanged) {
              this.removeEventListener("availabilitychanged", this._onavailabilitychanged);
              this._onavailabilitychanged = void 0;
            }
            if (fn) {
              this._onavailabilitychanged = fn;
              this.addEventListener("availabilitychanged", this._onavailabilitychanged);
            }
          },
          enumerable: false,
          configurable: true
        });
        BluetoothImpl2.prototype.filterDevice = function(filters, deviceInfo, validServices) {
          var valid = false;
          filters.forEach(function(filter) {
            var e_1, _a, e_2, _b;
            if (filter.name && filter.name !== deviceInfo.name)
              return;
            if (filter.namePrefix) {
              if (!deviceInfo.name || filter.namePrefix.length > deviceInfo.name.length)
                return;
              if (filter.namePrefix !== deviceInfo.name.substr(0, filter.namePrefix.length))
                return;
            }
            if (filter.services) {
              var serviceUUIDs = filter.services.map(uuid_1.BluetoothUUID.getService);
              var servicesValid = serviceUUIDs.every(function(serviceUUID) {
                return deviceInfo._serviceUUIDs.indexOf(serviceUUID) > -1;
              });
              if (!servicesValid)
                return;
              validServices = validServices.concat(serviceUUIDs);
            }
            if (filter.serviceData) {
              if (!deviceInfo._adData.serviceData)
                return;
              var services = __spreadArray([], __read(deviceInfo._adData.serviceData.keys()), false);
              try {
                for (var _c = __values(filter.serviceData), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var entry = _d.value;
                  if (!services.includes(entry.service))
                    return;
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
            }
            if (filter.manufacturerData) {
              if (!deviceInfo._adData.manufacturerData)
                return;
              var manufacturers = __spreadArray([], __read(deviceInfo._adData.manufacturerData.keys()), false);
              try {
                for (var _e = __values(filter.manufacturerData), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var entry = _f.value;
                  if (!manufacturers.includes(entry.companyIdentifier))
                    return;
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                } finally {
                  if (e_2) throw e_2.error;
                }
              }
            }
            valid = true;
          });
          if (!valid)
            return void 0;
          return deviceInfo;
        };
        BluetoothImpl2.prototype.forgetDevice = function(uuid) {
          this.allowedDevices.delete(uuid);
        };
        BluetoothImpl2.prototype.getAvailability = function() {
          return adapters_1.adapter.getEnabled();
        };
        BluetoothImpl2.prototype.requestDevice = function(options) {
          var _this = this;
          if (options === void 0) {
            options = { filters: [] };
          }
          if (this.scanner !== void 0) {
            throw new Error("requestDevice error: request in progress");
          }
          var isFiltered = function(maybeFiltered) {
            return maybeFiltered.filters !== void 0;
          };
          var isAcceptAll = function(maybeAcceptAll) {
            return maybeAcceptAll.acceptAllDevices === true;
          };
          var searchUUIDs = [];
          if (isFiltered(options)) {
            if (options.filters.length === 0) {
              throw new TypeError("requestDevice error: no filters specified");
            }
            var emptyFilter = options.filters.some(function(filter) {
              return Object.keys(filter).length === 0;
            });
            if (emptyFilter) {
              throw new TypeError("requestDevice error: empty filter specified");
            }
            var emptyPrefix = options.filters.some(function(filter) {
              return typeof filter.namePrefix !== "undefined" && filter.namePrefix === "";
            });
            if (emptyPrefix) {
              throw new TypeError("requestDevice error: empty namePrefix specified");
            }
            options.filters.forEach(function(filter) {
              if (filter.services)
                searchUUIDs = searchUUIDs.concat(filter.services.map(uuid_1.BluetoothUUID.getService));
              searchUUIDs = searchUUIDs.filter(function(item, index, array) {
                return array.indexOf(item) === index;
              });
            });
          } else if (!isAcceptAll(options)) {
            throw new TypeError("requestDevice error: specify filters or acceptAllDevices");
          }
          return new Promise(function(resolve, reject) {
            var found = false;
            _this.scanner = setTimeout(function() {
              _this.cancelRequest();
              if (!found) {
                reject("requestDevice error: no devices found");
              }
            }, _this.scanTime);
            adapters_1.adapter.startScan(searchUUIDs, function(deviceInfo) {
              var validServices = [];
              var complete = function(bluetoothDevice) {
                _this.allowedDevices.add(bluetoothDevice.id);
                _this.cancelRequest();
                resolve(bluetoothDevice);
              };
              if (isFiltered(options)) {
                deviceInfo = _this.filterDevice(options.filters, deviceInfo, validServices);
              }
              if (deviceInfo) {
                found = true;
                if (options.optionalServices) {
                  validServices = validServices.concat(options.optionalServices.map(uuid_1.BluetoothUUID.getService));
                }
                var allowedServices = validServices.filter(function(item, index, array) {
                  return array.indexOf(item) === index;
                });
                Object.assign(deviceInfo, {
                  _bluetooth: _this,
                  _allowedServices: allowedServices
                });
                var bluetoothDevice_1 = new device_1.BluetoothDeviceImpl(deviceInfo, function() {
                  return _this.forgetDevice(deviceInfo.id);
                });
                var selectFn = function() {
                  complete.call(_this, bluetoothDevice_1);
                };
                if (!_this.deviceFound || _this.deviceFound(bluetoothDevice_1, selectFn.bind(_this)) === true) {
                  complete.call(_this, bluetoothDevice_1);
                }
              }
            });
          });
        };
        BluetoothImpl2.prototype.getDevices = function() {
          var _this = this;
          if (this.scanner !== void 0) {
            throw new Error("getDevices error: request in progress");
          }
          return new Promise(function(resolve) {
            var devices = [];
            _this.scanner = setTimeout(function() {
              _this.cancelRequest();
              resolve(devices);
            }, _this.scanTime);
            adapters_1.adapter.startScan([], function(deviceInfo) {
              var _a;
              if (((_a = _this.options) === null || _a === void 0 ? void 0 : _a.allowAllDevices) || _this.allowedDevices.has(deviceInfo.id)) {
                Object.assign(deviceInfo, {
                  _bluetooth: _this,
                  _allowedServices: []
                });
                var bluetoothDevice = new device_1.BluetoothDeviceImpl(deviceInfo, function() {
                  return _this.forgetDevice(deviceInfo.id);
                });
                devices.push(bluetoothDevice);
              }
            });
          });
        };
        BluetoothImpl2.prototype.cancelRequest = function() {
          if (this.scanner) {
            clearTimeout(this.scanner);
            this.scanner = void 0;
            adapters_1.adapter.stopScan();
          }
        };
        BluetoothImpl2.prototype.requestLEScan = function(_options) {
          throw new Error("requestLEScan error: method not implemented.");
        };
        return BluetoothImpl2;
      }(events_1.EventDispatcher)
    );
    exports.BluetoothImpl = BluetoothImpl;
  }
});

// node_modules/webbluetooth/dist/index.js
var require_dist = __commonJS({
  "node_modules/webbluetooth/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bluetooth = exports.bluetooth = void 0;
    var bluetooth_1 = require_bluetooth();
    Object.defineProperty(exports, "Bluetooth", { enumerable: true, get: function() {
      return bluetooth_1.BluetoothImpl;
    } });
    exports.bluetooth = new bluetooth_1.BluetoothImpl();
    __exportStar(require_uuid(), exports);
  }
});
export default require_dist();
//# sourceMappingURL=dist-X7KCSCB7.js.map
